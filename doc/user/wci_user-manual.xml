<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[ 
	<!ENTITY % wdb.entities SYSTEM "../docbook/wdb_entities.ent">
	%wdb.entities;
]
>

<book>
	<title>WDB Call Interface User Manual</title>
	
	<bookinfo>
		<editor>
			<firstname>Michael</firstname>
			<othername>O.</othername>
			<surname>Akinde</surname>
			
			<affiliation>
				<orgname> <ulink url="http://www.met.no">met.no</ulink>
				</orgname>
				
				<address>
          <street>Niels Henrik Abelsvei 4</street> 
          <city>Oslo</city>
          <country>Norway</country>
          <email>wdb@met.no</email>
        </address>
			</affiliation>
		</editor>
		<abstract>
			
			<para>WDB is a data storage solution for weather and water data based on the
				PostgreSQL object-relational database system. The system utilizes
				PostGIS for GIS (Geographic Information Systems) support and handles
				regular grids (e.g., forecast fields) and point (e.g., observation)
				data.</para>
			
			<para>This is the User's Manual for WDB Call Interface of WDB version
				&version;</para>
			
		</abstract>
	</bookinfo>
	
	<chapter id="cha:wci_introduction">
		<title>Introduction</title>
		
		<para>The WDB Call Interface (WCI) is the official API used for retrieving data from
			the WDB system.</para>
		
		<sect1 id="sec:about_manual">
			<title>About this Manual</title>
			
			<para>This manual is intended for system designers, application developers
				and programmers. It describes in technical terms how weather data can be
				retrieved from the WDB system through the WCI. It is assumed that the reader
				has some familiarity with databases and weather data.</para>
			
			<para>For a more elaborate description of the vision and system architecture of
				the WDB system, see the WDB Developer's Manual.</para>
			
		</sect1>
		
		<sect1 id="sec:intended_usage">
			<title>Intended Usage</title>
			
			<para>WCI is intended to be used for retrieving weather data (e.g.,
				temperature, air pressure, etc.) for a geographic point or area, given an
				altitude interval and a time or time interval. It is possible to retrieve
				individual data values or huge quantities of data using a single
				API.</para>
			
		</sect1>
		
		<sect1 id="sec:wci_outline">
			<title>Outline</title>
			
			<para>This document is structured as follows:</para>
			
			<itemizedlist>
				<listitem>
					<para>Key Concepts: introduction to the concepts and terms used in the
						documentation</para>
				</listitem>
				<listitem>
					<para>Using the WCI: an introduction to how the WCI is used</para>
				</listitem>
				<listitem>
					<para>Function Reference: reference documentation for each of the
						WCI functions</para>
				</listitem>
				<listitem>
					<para>Data Types Reference: reference documentation for the WCI data
						types</para>
				</listitem>
				<listitem>
					<para>Examples: Example programs for WCI</para>
				</listitem>
				<listitem>
					<para>FAQ: Frequently asked questions</para>
				</listitem>
				<listitem>
					<para>Known bugs and limitations</para>
				</listitem>
			</itemizedlist>
			
		</sect1>
		
	</chapter>
	
	<chapter id="cha:key_concepts">
		<title>Key Concepts</title>
		
		<para>This section provides an overview of the WCI, including some important
			definitions and explanations.</para>
		
		<sect1 id="sec:wci_overview">
			<title>Overview</title>
			
			<para>WCI is an API designed to retrieve weather data from the WDB system. The WCI
				API resides on the database server.</para>
			
			<para>All function calls on WCI are executed as SQL statements. The SQL
				statements can be executed through a dedicated SQL client application,
				such as psql, pgadmin3, DbVisualizer, or by an application program through
				a database API such as JDBC, ODBC, libpqxx, etc. The WCI is thus not linked
				into the application program itself, but is a component of the
				database.</para>
			
			<para>A data item in WDB could be an observation, a forecast, an analysis, etc.
				Each item consists of a value and a number of dimensions that describe the
				value.</para>
			
			<para>A dimension could be a description of the data item (e.g., temperature),
				its geographic position, its altitude (or depth), the time the data item was
				created, the origin of the data item, etc.</para>
			
			<para>In order to access the data items in WDB, the user should have an understanding of the
				dimensions as they are the entry point into the database. When data is retrieved from
				the database, a set of search criteria is given for each of the
				WCI dimensions. If the search criteria for a dimension is
				not specified (i.e., all NULLs), it is assumed the user wants to retrieve all data items,
				regardless of their dimension description. Please do not attempt this unless the database 
				you are querying is extremely small.</para>
				
			<para>In the context of WCI search criteria, NULL is always interpreted to mean "ALL".</para>
			
			<para>The last parameter of a WCI function call that is intended to return data is always
			reserved for specifying the data type to be returned (this is because most functions are 
			overloaded to return many different forms of data. By convention, this parameter is 
			usually given as a NULL cast to the relevant data type; for example:</para>

			<programlisting>
NULL::wci.browsereferencetime
		</programlisting>
			
			<para>The dimensions are described in the following sections.</para>
			
		</sect1>
		
		<sect1 id="sec:data_provider">
			<title>Data Provider</title>
			
			<para>The Data Provider identifies the source of the data; literally,
				<emphasis>the entity that provides the data</emphasis>. Where multiple
				sources could be identified as the source of the data, the entity that can be
				identified closest to the creation of the data item at the time of loading is
				usually used.</para>
			
			<para>A data provider can be a software process (e.g., Hirlam), a
				meteorological or climate station, an aircraft, or a person. A data provider 
				is identified by a DataProviderName. DataProviderNames are 
				used to search for the data. For convenience, Data Providers may be
				collected into groups; e.g., the DataProviderName "Hirlam" might be used
			    to search for any of the various Hirlam processes: "Hirlam 4", "Hirlam 8", 
				etc.</para>
			
			<para>When searching for data, the user may specify a single DataProviderName,
				a list of DataProviderNames (specified using an ARRAY constructor), or NULL. 
				NULL indicates that the user wants all 	data items, regardless of the data 
				source.</para>

			<para>DataProviderNames exist within a data provider namespace. A namespace can be defined by
				the WDB administrator, in order to permit the user or an application to retrieve data in
				an accustomed language or code set. The default namespace of WDB is the DataProviderNameSpaceId
				0, and is always based on English language names and international standard codes. The 
				data provider namespace being used in a querying session can be defined by the user when
				starting up the session.
			</para>
			
			<para>To retrieve all of the DataProviderNames (excluding data provider groups) that are
				currently stored in the database for the currently specified namespace, the following 
				wci.browse function call could be used:</para>
			
			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browsedataprovider );
		</programlisting>

			<para>To retrieve all of the DataProviderNames (including data provider groups) that the
				database currently has the capacity to store and display in the currently specified
				namespace, the following wci.info function call could be used:</para>
			
			<programlisting>
SELECT * FROM wci.getDataProvider( NULL );
		</programlisting>
									
		</sect1>
		 
		<sect1 id="sec:place">
			<title>Place (Geographic Location)</title>
			
			<para>The place (geographic location) of a data item is the position of the item
				on the earth in a 2D space. In WDB, the geographic location is by default
				specified using longitude and latitude in a WGS84 coordinate system
				(though this can be changed when the database is set up; consult your system
				administrator). The geographic dimension is specified using a geometry
				object and can be either a point or a polygon.</para>
			
			<para>In addition to using geometry objects to retrieve data, the user can also
				use a PlaceName - a pre-specified name that defines a geometry object in the
				database - to specify location.</para>

			<para>As for DataProviderName, PlaceNames exist within a place namespace that can be defined
				by the WDB administrator. The default namespace of WDB is the PlaceNameSpaceId 0; defined
				in international english. As for the data provider namespace, the place namespace can be 
				defined by the user when starting up the session. 
			</para>
			
			<para>To retrieve the full list of the PlaceNames for the data values currently being stored
			in the database, use the following wci.browse function call:</para>

			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browseplace );
		</programlisting>
									
			<para>At the same time as the user specifies a location to retrieve data from, it
				is also possible to specify an interpolation option for location
				calculations. These permit the user a great deal of flexibility in
				searching. Currently, interpolations such as "exact", "nearest" (retrieve the
			data value closest to the specified place), and "bilinear" (retrieve the closest data
			values and perform a bilinear interpolation of those values) are implemented.</para>
			
			<para>The form of place specification then becomes one of the two following:</para>
			
			<programlisting>
'Oslo'
		</programlisting>
			<programlisting>
'nearest Oslo'
		</programlisting>
			<programlisting>
'POINT(61 9)'
		</programlisting>
			<programlisting>
'bilinear POINT(61 9)'
		</programlisting>
			
			<para>Specifying NULL for the place definition of a query is logically
				equivalent to asking for all of the data items in the database, irrespective
				of their location.</para>
			
			<para>To retrieve all of the place names that are currently registered in the database,
				the following WCI function call can be used:</para>
			
			<programlisting>
SELECT * FROM wci.getPlaceDefinition( NULL );
		</programlisting>

		</sect1>
		
		<sect1  id="sec:reftime">
			<title>Reference Time</title>
			
			<para>The reference time of a data item is the moment when the data item is
				referenced from. For forecast data, this would typically be the reference
				time of the data values the forecast is based upon; for observation data,
				it would typically be the time when the observation data was recorded.</para>
			
			<para>When searching for data, the user specifies the reference time (with time
				zone), or NULL. NULL indicates that the user wants all data items,
				regardless of the reference time of the data. Time is specified in WCI as
			    a text string with datetime's that are interpreted by the WCI parser.</para>

			<para>To retrieve a list of the reference times currently being stored in the
				database, use the wci.browse functionality:</para>
			
			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browsereferencetime );
		</programlisting>
			
			<para>In addition to time points, it is also possible for the user to specify time periods 
			using a variety of keywords. The keywords are: exact (default), before, after, inside, and contains. 
			And interval can be specified using two timestamps and separating them with the keyword TO, or a 
			timestamp and a duration separated by the keyword FOR. As examples, consider:
			</para>
			
			<programlisting>
exact 2009-03-31T11:20:00+00
		</programlisting>
		
			<para>Denotes the specific time point of 11:20 UTC, on the 31st of March, 2009. The keyword 
			"exact" is actually redundant, as this is the default interpretation of a timestamp in
			WCI.</para>
			
			<programlisting>
before 2009-03-31T11:20:00+00
		</programlisting>
		
			<para>Denotes that the user wants to return all data for the time period prior to the time 
			point of 11:20 UTC, on the 31st of March, 2009.</para>
			
			<programlisting>
after 2009-03-31T11:20:00+00
		</programlisting>
		
			<para>Denotes that the user wants to return all data for the time period after the time 
			point of 11:20 UTC, on the 31st of March, 2009.</para>
			
			<programlisting>
inside 2009-03-31T11:20:00+00 TO 2009-05-31T11:20:00+00 
		</programlisting>
		
			<para>Denotes that the user wants to return all data inside the time period between the time 
			point of 11:20 UTC, on the 31st of March, 2009 and the same time two months later.</para>
			
			<programlisting>
inside 2009-03-31T11:20:00+00 FOR 2 months 
		</programlisting>
		
			<para>Denotes that the user wants to return all data inside the time period between the time 
			point of 11:20 UTC, on the 31st of March, 2009 and the same time two months later.</para>
			
		</sect1>
				
		<sect1 id="sec:validtime">
			<title>Valid Time</title>
			
			<para>The valid time of a data item is the time period for which the data item is
				valid. The valid time is always stored in the database as a time interval.</para>
			
			<para>When searching for data, the user specifies the valid time (with time
				zone), or NULL. NULL indicates that the user wants all data items,
				regardless of the valid time of the data. Time is specified in WCI as
			    a text string with datetime's that are interpreted by the WCI parser.</para>

			<para>As usual, the list of valid times stored in the database can be retrieved
			using the wci.browse functionality.</para>

			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browsevalidtime );
		</programlisting>

			<para>Time is specified in the same way for time periods as for time points. Examples of
			how the qualifiers should be interpreted are given below:</para>

			<programlisting>
exact 2009-03-31T11:20:00+00 TO 2009-05-31T11:20:00+00 
		</programlisting>
			
			<para>The exact keyword returns only time periods that match precisely with the time period specified.
			</para>
			
			<programlisting>
before 2009-03-31T11:20:00+00
		</programlisting>
		
			<para>The before keyword returns only time periods that end before the specified time
			point. In other words, the time period from 2009-03-29 to 2009-03-30 would be returned by the query
			but the time period from 2009-03-29 to 2009-04-01 would not.</para>
			
			<programlisting>
after 2009-03-31T11:20:00+00
		</programlisting>
		
			<para>The after keyword returns only time periods that start after the specified time point.</para>

			<programlisting>
inside 2009-03-31T11:20:00+00 TO 2009-05-31T11:20:00+00 
		</programlisting>
		
			<para>The inside keyword for time periods is true if the time period both starts and ends 
			within the designated time (the time point specified inclusive). It does not return time
			periods that merely overlap (i.e., where only the start time or the end time are within
			the given time period).</para>
			
			<programlisting>
contains 2009-03-31T11:20:00+00 TO 2009-05-31T11:20:00+00 
		</programlisting>
			
			<para>The contains keyword returns all the data with valid times beginning prior to the
			specified time and ending after the specified time. Semantics are inclusive, so a valid 
			time that matches exactly would be returned as a row by this query.</para>
			
		</sect1>
		
		<sect1 id="sec:value_parameter">
			<title>Value Parameter</title>
			
			<para>Each data value can be described using a "value parameter". The value
				parameter is a name that describes the physics or code table basis of the
				parameter value. The value parameter concept in WCI is broadly similar to
				the concept of meteorological parameter used in, e.g., GRIB files.</para>
						
			<para>The user searches the database for a specific parameter in the database
			using the ValueParameterName. ValueParameterNames are specified within a 
			parameter namespace. As with the other namespaces, the ParameterNameSpaceId 0
			is reserved for the default WDB namespace, and is based on international 
				english. Additional namespaces can be defined by the administrator of the
				database.
			</para>
			
			<para>To retrieve a list of the value parameters currently being stored in the
				database, use the wci.browse functionality:</para>
			
			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browsevalueparameter );
		</programlisting>
			
			<para>To list all of the value parameter names that can be stored in the database using
			the currently selected parameter namespace, the following wci.info function call could 
			be used:</para>
			
			<programlisting>
SELECT * FROM wci.getValueParameter( NULL );
		</programlisting>

		</sect1>
		
		<sect1 id="sec:level">
			<title>Level</title>
			
			<para>The <emphasis>Level</emphasis> dimension is normally used to designate the
				altitude or depth of the data value. Level is designated using a level interval (height 
				from and to) and a level parameter (e.g., height above sea level, pressure). The level
				definition can be prefixed with a level interpolation option that permits the
				user a large degree of flexibility in expressing searches. Levels are specified using
				a level specification in string form that is parsed by the WCI.</para>
			
			<para>The level designation in the WCI queries is a string. The form of the level 
			designation when querying the database is as follows:</para>
			
			<programlisting>
interpolation levelFrom TO levelTo leveparametername
		</programlisting>
		
			<para>The interpolations available are <emphasis>exact</emphasis>, 
			<emphasis>below</emphasis>, <emphasis>above</emphasis>, <emphasis>inside</emphasis>, 
			and <emphasis>any</emphasis>. The default interpolation is exact 
			(specifying the interpolation is optional). One may also omit the 
			<emphasis>TO levelTo</emphasis> construction if the level being specified is a
			point.</para>

			<para>Specifying <emphasis>any</emphasis> for the level interpolation is
				logically equivalent to specifying a NULL for the level; i.e., it retrieves
				all data items regardless of their level (height).</para>

			<para>The level parameter is specified using a LevelParameterName. LevelParameterNames
				are specified within the parameter namespace. Consequently, it is not possible
				to mix usage of ValueParameterNames and LevelParameterNames from different namespaces
				without defining a new parameter namespace. The default WDB ParameterNameSpaceId is 0
				and is based on international english. 
			</para>
			
			<para>Examples of level designations are given below:</para>
			
			<programlisting>
exact 2 height 
		</programlisting>
			
			<programlisting>
above 0 height above mean sea level distance 
		</programlisting>
			
			<programlisting>
inside 300 TO 500 isobaric surface pressure
		</programlisting>

			<para>To retrieve a full list of the levels and level parameters currently being stored in the
				database, use the wci.browse functionality:</para>
			
			<programlisting>
SELECT * FROM wci.browse( NULL::wci.browselevelparameter );
		</programlisting>
						
			<para>To list all of the level parameter names that can be stored in the database using
			the currently selected parameter namespace, the following wci.info function call could 
			be used:</para>
			
			<programlisting>
SELECT * FROM wci.getLevelParameter( NULL );
		</programlisting>

		</sect1>
		
		<sect1 id="sec:data_version">
			<title>Data Version</title>
			
			<para>There can be several different versions of the same data value that is
				valid for the same time, position, etc. This can happen with probability
				forecast calculations or when a data value is edited (in which case the new
				value may often be inserted with a higher data version). A data version is
				always a positive whole number.</para>
			
			<para>The user may specify one or several data versions as search criteria in
				WCI, as well as NULL. NULL indicates that the user wants all versions of the
				data items specified. In addition, the user may specify the data version as
				a negative number; e.g., <emphasis>-1</emphasis>. Specifying <emphasis>-1</emphasis>
				retrieves the maximum data version in the database (i.e., the most recent version of the data item), 
				<emphasis>-2</emphasis> retrieves the second most recent, and so on.</para>
			
			<para>There is no wci.browse functionality to list all of the data versions of the data in the 
			database.</para>
			
		</sect1>
		
	</chapter>
	
	<chapter id="cha:using_wci">
		<title>Using the WCI</title>
		
		<para>This section gives an overview on how to use the WCI to retrieve data values from
			WDB.</para>
		
		<sect1 id="sec:using_outline">
			<title>Outline</title>
			
			<para>The following list provides a brief overview of the actions that the user
				takes in order to retrieve data from WCI.</para>
			
			<itemizedlist>
				<listitem>
					<para>Create a connection to the database</para>
				</listitem>
				<listitem>
					<para>Initialize WCI</para>
				</listitem>
				<listitem>
					<para>Read data from WDB using WCI functions (one or more times)</para>
				</listitem>
				<listitem>
					<para>Release WCI</para>
				</listitem>
				<listitem>
					<para>Close database connection</para>
				</listitem>
			</itemizedlist>
			
		</sect1>
		
		<sect1 id="sec:open_connection">
			<title>Open a connection</title>
			
			<para>To enable communication with WCI, the user must open a connection to the
				database. How this is done depends very much on the application or API that is
				being used (consult the documentation of the program or API for
				information).</para>
			
			<para>Using libpq,</para>
			
			<programlisting>
connection_ = PQconnectdb("dbname=wdb user=myuser host=localhost");
		</programlisting>
			
			<para>The connection must be open and valid as long as commands are being sent and
				data retrieved from the database. It is worth noting that connections are a
				resource; the database will have limits on how many connections
				can be open at the same time. This is particularly important for massively
				multi-user applications (e.g., web applications). In such cases, the
				database connections must be managed with some care. There is also an amount 
			overhead involved with setting up a connection, so it will always be more efficient 
			to connect once and perform multiple database operations, than to connect repeatedly
			for each operation.</para>
						
		</sect1>
		
		<sect1 id="sec:initialize_wci">
			<title>Initialize WCI</title>
			
			<para>Before WCI may be used by the user, it must be initialized.</para>
			
			<programlisting>
SELECT wci.begin('myuser'::name, 0::integer, 0::integer, 0::integer);
		</programlisting>
			
			<para>The username is used to identify the user with WCI (this is used in setting
				up internal WCI variables). The three following numbers are the namespace
				codes for data provider namespace, place name space, and parameter name space.
				The wci.begin can also be called without setting these three variables, in 
				which case they are set to the default (usually 0, 0, 0) by the system.</para>
			
			<para>The username of the wci user can be a different identity than the one the
				user connected with (always assuming, of course, that your user has
				appropriate rights). This allows, for instance, for a single system to act
				as a multiplexing front-end to retrieve data available from several
				distinct users.</para>

			<para>Name spaces are used to identify what set of names should be used for searching 
				the database. While the user is in a namespace, only the data defined in that
				namespace is visible to the user. If the user should wish, for some reason, to
				combine data from different namespaces within an application, it will be necessary
				to call wci.begin repeatedly; once for each time the application needs to change its
				namespace.
				</para>
						
		</sect1>
		
		<sect1 id="sec:reading_wci">
			<title>Read from the WCI</title>
			
			<para>As soon as the user has initialized WCI using wci.begin, the database is
				ready for retrieval of data. Data is retrieved using the wci.read function,
				and data is searched for by setting the appropriate dimensions in that
				call.</para>
			
		<sect2 id="sec:reading_wci_point">
			<title>Reading Point Data from WCI</title>

			<para>The wci.read function is overloaded to permit the user to read either point data or binary data (entire grids)
				from the database. The last parameter in the wci.read function allows the user to specify the return type of 
				the query. To return point data values, the user specifies wci.returnFloat.</para>
			
			<programlisting>
SELECT * 
FROM wci.read ( ARRAY['hirlam norway'], -- Data provider name
				'POLYGON((10 60,11 60,11 61,10 61,10 60))',  -- Location
				'inside 1980-01-01 12:00:00Z TO 1980-01-01 18:00:00Z', -- Reference time 
				NULL, -- Valid Time 
				ARRAY['air temperature'],  -- Value Parameter
				'2 height',  -- Level
				ARRAY[-1], -- Data version
				NULL::wci.returnfloat -- Return type
			  )
		</programlisting>
			
			<para>The above query returns Hirlam data for a specific region (given by the place
				geometry), whose referencetime is on or between 12:00 to 18:00 on January
				1, 1980; the query will return data for any valid times, for any air temperature.
				It will return data at 2 metre above ground, but only the latest version of such data.
				Values will be returned as point data.</para>
			
			<para>The data provider, place definition, value parameter and level parameter must all
			be defined within the namespaces given in the wci.begin call that preceded the wci.read
			call. In this particular case, the place definition is a geometry definition, but it would
			also have been possible to use a placename. Consider, for example, the following query:</para>

			<programlisting>
SELECT * 
FROM wci.read ( ARRAY['hirlam norway'], -- Data provider name
				'oslo',  -- Location
				'1980-01-01 12:00:00Z', -- Reference time 
				'inside 1980-01-02 12:00:00 TO 1980-01-12 12:00:00', -- Valid Time 
				ARRAY['%precipitation%'],  -- Value Parameter
				NULL,  -- Level
				NULL, -- Data version
				NULL::wci.returnfloat -- Return type
			  )
		</programlisting>
			
			<para>The above call returns all precipitation parameters valid for the 10 days following the 
				given referencetime measured at the nearest point to oslo. Oslo, in this case, is a place name
				usually defined as a geographical point within the database. Prefixing the place name is the 
				interpolation that we wish to use when retrieving points; we could also have used any of the
				alternatives defined in the reference manual below. Note the use of SQL wildcard characters in the
				value parameter; although these slow down queries (since wildcard searching is not as efficient
				as a straight comparison), it is possible to use the wci.read call in this way. Note also that names 
				can be written in upper or lower case; the wci.read function call is not case-sensitive.</para>
						
			<sect3 id="sec:reading_wci_point_return_type">
			<title>Return values</title>
			
			<para>The return value from this call is one row for each value. This means that if you have chosen an 
			interpolation type that will return several values for each grid, you will get many rows for each grid. 
			</para>
			
			<para>
			The actual data value is given in the column "value". In some cases this may have a NULL value. This means 
			that the there exists a data field for your query, and the point(s) you requested is inside the data's grid, 
			but that grid point has explicitly gotten a "not defined" value. 
			 </para>
			</sect3>
						
			</sect2>

			<sect2 id="sec:reading_wci_grid">
			<title>Reading Grid Data from WCI</title>

			<para>Reading grid data from the database is a two-step process. First the user retrieves the Grid ID with 
				wci.read function (with wci.returnGId), and then the grid itself can be retrieved using the wci.fetch function call.</para>
			
			<programlisting>
SELECT * 
FROM wci.read ( ARRAY['hirlam norway'],    -- Data provider name
				'hirlam 10km grid',          -- Location description
				'1980-01-01 12:00:00Z',    -- Reference time 
				NULL,                      -- Valid Time (returns all forecasts) 
				ARRAY['air temperature'],  -- Value Parameter
				'2 height',  -- Level
				ARRAY[-1],                 -- Data version
				NULL::wci.returngid        -- Return type
			  )
		</programlisting>
			
			<para>The above query returns the list of grids available for Hirlam data, defined
				on the hirlam 10km grid (i.e., if there were data on 20km or 4km grids, these would
				not be returned), whose referencetime is 12:00 on January 1, 1980. The query will return
				all grid references to air temperature forecasts for the above configuration.</para>
			
			<para>Grid IDs are essentially 8-byte integers, that are then passed to the wci.fetch
				command, as given below:</para>

			<programlisting>
SELECT * 
FROM wci.fetch ( 7411403,          -- Grid ID (bigint)
				 NULL::wci.grid    -- Return Type
				)
		</programlisting>
			
			<para>The above call returns a single row, containing a binary string containing the actual grid data.
				It also includes additional information detailing the configuration of the grid. For details about
			the wci.fetch call, see the function reference.</para>

			<sect3 id="sec:reading_wci_grid_return_type">
			<title>Return values</title>
			
			<para>The return value from this call is one row for each grid. The number given in the "value" column 
			may be used as input argument for a wci.fetch call.
			</para>
			</sect3>
			
			</sect2>

		</sect1>

		<sect1 id="sec:release_wci">
			<title>Release WCI</title>
			
			<para>Once the user has finished retrieving data using WCI, it is a good idea to
				close down WCI.</para>
			
			<programlisting>
SELECT wci.end();
		</programlisting>
			
			<para> This is not strictly necessary, but allows the system to graciously
				deallocate resources and reset any settings that may have been changed by
				WCI.</para>
			
		</sect1>
		
		<sect1 id="sec:close_connection">
			<title>Close Connection</title>
			
			<para>Closes down the connection to the database, freeing up the resources on
				the database to be used by other applications.</para>
			
			<para>Using libpq,</para>
			
			<programlisting>
PQfinish(connection_);
		</programlisting>
			
		</sect1>
		
	</chapter>
	
	<chapter id="cha:wci_function_reference">
		<title>Function Reference</title>
		
		<para>The following sections provide a list of the functions available for usage
			through the WDB Call Interface.</para>

		<sect1 id="sec:wci.addcodelevelparameter">
			<title>wci.addCodeLevelParameter</title>
			
			<para>The function wci.addCodeLevelParameter allows an administrator to add new 
			Level Parameters representing code tables to the WDB system.</para>
			
			<sect2 id="sec:wci.addcodelevelparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addcodelevelparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addcodelevelparameter 
(
	parameterName			text,
	parameterReference 		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodelevelparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addCodeLevelParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterName</entry>
								<entry>The canonical parameter name to be used 
								for the code table (i.e., the parameter
								name set in the default name space. Ideally, 
								this should be a universally unique name or code.</entry>
							</row>
							<row>
								<entry>parameterReference</entry>
								<entry>Reference information for the code table.								
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodelevelparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodelevelparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'hybrid level' code parameter from WMO:</para>
				
				<programlisting>
SELECT wci.addcodelevelparameter ( 'hybrid level', 'WMO Code Table 3, WMO publication no. 306 - Manual on Code' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addcodelevelparamater.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasurelevelparameter</para></listitem>
					<listitem><para>wci.getcodelevelparameter</para></listitem>
					<listitem><para>wci.getlevelparameter</para></listitem>
					<listitem><para>wci.getmeasurelevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addcodevalueparameter">
			<title>wci.addCodeValueParameter</title>
			
			<para>The function wci.addCodeValueParameter allows an administrator to add new 
			Value Parameters representing code tables to the WDB system.</para>
			
			<sect2 id="sec:wci.addcodevalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addcodevalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addcodevalueparameter 
(
	parameterName			text,
	parameterReference 		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodevalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addCodeValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterName</entry>
								<entry>The canonical parameter name to be used 
								for the code table (i.e., the parameter
								name set in the default name space. Ideally, 
								this should be a universally unique name or code.</entry>
							</row>
							<row>
								<entry>parameterReference</entry>
								<entry>Reference information for the code table.								
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodevalueparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addcodevalueparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'yr weather symbol' code parameter from www.yr.no:</para>
				
				<programlisting>
SELECT wci.addcodevalueparameter ( 'yr weather symbol', 'http://www.yr.no' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addcodevalueparamater.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addparameterfunctiontype</para></listitem>
					<listitem><para>wci.getcodevalueparameter</para></listitem>
					<listitem><para>wci.getvalueparameter</para></listitem>
					<listitem><para>wci.getparameterfunctiontype</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.adddataprovider">
			<title>wci.addDataProvider</title>
			
			<para>The function wci.addDataProvider allows an administrator to add a new 
			Data Provider to the WDB system.</para>
			
			<sect2 id="sec:wci.adddataprovider.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.adddataprovider 
(
	dataProviderName		text,
	dataProviderType 		text,
	domainDelivery			text,
	dataProviderComment		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addDataProvider parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviderName</entry>
								<entry>The canonical data provider name to be used (i.e., the data 
								provider name set in the default name space. Ideally, this should be
								a universally unique name or code.</entry>
							</row>
							<row>
								<entry>dataProviderType</entry>
								<entry>The type of the data provider. Currently, this may be one of the following:
									<itemizedlist>
										<listitem><para>Aeroplane</para></listitem>
										<listitem><para>Computer System</para></listitem>
										<listitem><para>Data Provider Group</para></listitem>
										<listitem><para>Named Observation Site</para></listitem>
										<listitem><para>Person</para></listitem>
										<listitem><para>Ship</para></listitem>
										<listitem><para>WCI User</para></listitem>
									</itemizedlist>
								</entry>
							</row>
							<row>
								<entry>domainDelivery</entry>
								<entry>The domain of the data delivered by the data provider. A precise
								domain definition helps the database to optimize the queries. The options
								are:
									<itemizedlist>
										<listitem><para>Any</para></listitem>
										<listitem><para>Grid</para></listitem>
										<listitem><para>Point</para></listitem>
									</itemizedlist>
								</entry>
							</row>
							<row>
								<entry>dataprovidercomment</entry>
								<entry>Supplementary information about the dataprovider.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider.result">
				<title>Expected Result</title>
				
				<para>The DataProviderId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider.example">
				<title>Example</title>
				
				<para>An example setting up the data provider "michael" who provides point data:</para>
				
				<programlisting>
SELECT wci.adddataprovider ( 'michael', 'Person', 'Point', 'Editor of point forecasts' );
</programlisting>
								
				<para>Adding a new model to the database:</para>

				<programlisting>
SELECT wci.adddataprovider( 'longyear', 'Computer System', 'Grid', 'Model generated from longyearbyen' ); 
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovidertogroup</para></listitem>
					<listitem><para>wci.addwciuser</para></listitem>
					<listitem><para>wci.getdataprovider</para></listitem>
					<listitem><para>wci.getdataprovidername</para></listitem>
					<listitem><para>wci.setdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.adddataprovider2group">
			<title>wci.addDataProviderToGroup</title>
			
			<para>The function wci.addDataProviderToGroup allows an administrator to add a 
			specified data provider to a data provider group in WDB.</para>
			
			<sect2 id="sec:wci.adddataprovider2group.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider2group.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.adddataprovidertogroup
(
	dataProviderName		text,
	dataProviderGroup		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider2group.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addDataProviderToGroup parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviderName</entry>
								<entry>The data provider name to be added to the specified group.</entry>
							</row>
							<row>
								<entry>dataProviderGroup</entry>
								<entry>The data provider group that you want to add this data provider name to.
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider2group.result">
				<title>Expected Result</title>
				
				<para>The DataProviderId (key reference number) of the assigned data provider.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider2group.example">
				<title>Example</title>
				
				<para>An example setting the data provider "michael" into group 'metno':</para>
				
				<programlisting>
SELECT wci.adddataprovidertogroup ( 'michael', 'metno' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.adddataprovider2group.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovider</para></listitem>
					<listitem><para>wci.addwciuser</para></listitem>
					<listitem><para>wci.getdataprovider</para></listitem>
					<listitem><para>wci.getdataprovidername</para></listitem>
					<listitem><para>wci.setdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.adddimvalueparameter">
			<title>wci.addDimensionlessValueParameter</title>
			
			<para>The function wci.addDimensionlessValueParameter allows an administrator to add new 
			Value Parameters without a physical dimension to the WDB system.</para>
			
			<sect2 id="sec:wci.adddimvalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.adddimvalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.adddimensionlessvalueparameter 
(
	parameterName			text,
	parameterDescription	text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.adddimvalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addDimensionlessValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterName</entry>
								<entry>The canonical parameter name to be used 
								for the measure table (i.e., the parameter
								name set in the default name space. Ideally, 
								this should be a universally unique name or measure.</entry>
							</row>
							<row>
								<entry>parameterDescription</entry>
								<entry>A description of the value parameter.								
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.adddimvalueparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.adddimvalueparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'land cover' value parameter from WMO:</para>
				
				<programlisting>
SELECT wci.adddimensionlessvalueparameter ( 'land cover', 'Proportion of grid cell covered by land (WMO)' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.adddimvalueparamater.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addfunctionvalueparameter">
			<title>wci.addFunctionValueParameter</title>
			
			<para>The function wci.addFunctionValueParameter allows an administrator to add new 
			function value parameters to the WDB system.</para>
			
			<sect2 id="sec:wci.addfunctionvalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addfunctionvalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addfunctionvalueparameter
(
	parameterUsage			text,
	parameterUnit			text,
	parameterFunction		text,
	parameterQuantity		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addfunctionvalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addFunctionValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterUsage</entry>
								<entry>The usage dimension of the value parameter.</entry>
							</row>
							<row>
								<entry>parameterUnit</entry>
								<entry>The SI unit of the value parameter. The unit is
								used to determine the physical dimension of the function
								value parameter.		
								</entry>
							</row>
							<row>
								<entry>parameterFunction</entry>
								<entry>The function of the value parameter.</entry>
							</row>
							<row>
								<entry>parameterQuantity</entry>
								<entry>The quantity type of the value parameter; either
								scalar or vector.								
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addfunctionvalueparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addfunctionvalueparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'mean wind waves duration' value parameter 
				to the database:</para>
				
				<programlisting>
SELECT wci.addfunctionvalueparameter ( 'wind waves', 's', 'mean', 'scalar' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addfunctionvalueparamater.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addlevelparameterusage">
			<title>wci.addLevelParameterUsage</title>
			
			<para>The function wci.addLevelParameterUsage allows an administrator to add new 
			Level Parameter usages to the WDB system.</para>
			
			<sect2 id="sec:wci.addlevelparameterusage.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addlevelparameterusage.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addlevelparameterusage
(
	levelParameterUsage		text,
	levelDescription		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addlevelparameterusage.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addLevelParameterUsage parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>levelParameterUsage</entry>
								<entry>A usage dimension for a level parameter.</entry>
							</row>
							<row>
								<entry>levelDescription</entry>
								<entry>A description of the usage dimensions.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addlevelparameterusage.result">
				<title>Expected Result</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addlevelparameterusage.example">
				<title>Example</title>
				
				<para>An example adding the 'height above ground' level usage 
				to the database:</para>
				
				<programlisting>
SELECT wci.addlevelparameterusage ( 'height above ground', 
			'Denotes the height level of the value-' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addlevelparameterusage.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getlevelparameterusage</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addmeasure">
			<title>wci.addMeasure</title>
			
			<para>The function wci.addMeasure allows an administrator to add new 
			measures (e.g., physical dimensions) to the WDB system.</para>
			
			<sect2 id="sec:wci.addmeasure.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addmeasure.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addmeasure
(
	measure 				character varying,
	distancepower 			integer,
	masspower 				integer,
	timepower 				integer,
	luminositypower 		integer, 
	electriccurrentpower 	integer,
	temperaturepower 		integer,
	substanceamountpower 	integer,
	anglepower 				integer
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasure.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addmeasure parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>measure</entry>
								<entry>The measure being described.</entry>
							</row>
							<row>
								<entry>distancepower</entry>
								<entry>The distance dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>masspower</entry>
								<entry>The mass dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>timepower</entry>
								<entry>The time dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>luminositypower</entry>
								<entry>The luminosity dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>electriccurrentpower</entry>
								<entry>The electric current dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>temperaturepower</entry>
								<entry>The temperature dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>substancepower</entry>
								<entry>The substance dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>anglepower</entry>
								<entry>The angular dimension of the measure. Use 0 to denote none.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasure.result">
				<title>Expected Result</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasure.example">
				<title>Example</title>
				
				<para>An example adding 'acceleration' measure 
				to the database:</para>
				
				<programlisting>
SELECT wci.addmeasure ( 'acceleration', 1, 0, -2, 0, 0, 0, 0, 0 );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addmeasure.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getmeasure</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addmeasurelevelparameter">
			<title>wci.addMeasureLevelParameter</title>
			
			<para>The function wci.addMeasureLevelParameter allows an administrator to add new 
			level parameters based on measures to the WDB system.</para>
			
			<sect2 id="sec:wci.addmeasurelevelparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addmeasurelevelparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addmeasurelevelparameter
(
	parameterUsage			text,
	parameterUnit			text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurelevelparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addMeasureLevelParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterUsage</entry>
								<entry>The usage dimension of the level parameter.</entry>
							</row>
							<row>
								<entry>parameterUnit</entry>
								<entry>The SI unit of the level parameter. The unit is
								used to determine the physical dimension of the measure
								value parameter.		
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurelevelparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurelevelparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'isobaric surface pressure' level parameter 
				to the database:</para>
				
				<programlisting>
SELECT wci.addmeasurelevelparameter ( 'isobaric surface', 'Pa' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addmeasurelevelparamater.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getlevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addmeasurevalueparameter">
			<title>wci.addMeasureValueParameter</title>
			
			<para>The function wci.addMeasureValueParameter allows an administrator to add new 
			value parameters based on measures to the WDB system.</para>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addmeasurevalueparameter
(
	parameterUsage			text,
	parameterUnit			text,
	parameterQuantity		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addMeasureValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterUsage</entry>
								<entry>The usage dimension of the value parameter.</entry>
							</row>
							<row>
								<entry>parameterUnit</entry>
								<entry>The SI unit of the value parameter. The unit is
								used to determine the physical dimension of the measure
								value parameter.		
								</entry>
							</row>
							<row>
								<entry>parameterQuantity</entry>
								<entry>The quantity type of the value parameter.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.result">
				<title>Expected Result</title>
				
				<para>The ParameterId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.example">
				<title>Example</title>
				
				<para>An example adding the 'air temperature' value parameter 
				to the database:</para>
				
				<programlisting>
SELECT wci.addmeasurevalueparameter ( 'air', 'K', 'scalar' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addmeasurevalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasure</para></listitem>
					<listitem><para>wci.getmeasurevalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>
	
	
		<sect1 id="sec:wci.addparameterfunctiontype">
			<title>wci.addParameterFunctionType</title>
			
			<para>The function wci.addParameterFunctionType allows an administrator to add new 
			function types to be used with value parameters to the WDB system.</para>
			
			<sect2 id="sec:wci.addparameterfunctiontype.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addparameterfunctiontype.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addparameterfunctiontype
(
	parameterFunctionType			text,
	parameterFunctionDescription	text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addparameterfunctiontype.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addParameterFunctionType parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterFunctionType</entry>
								<entry>The name of the function type being defined for
								value parameters.</entry>
							</row>
							<row>
								<entry>parameterFunctionDescription</entry>
								<entry>A description of the parameter function.		
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addparameterfunctiontype.result">
				<title>Expected Result</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addparameterfunctiontype.example">
				<title>Example</title>
				
				<para>An example adding the 'max' function type 
				to the database:</para>
				
				<programlisting>
SELECT wci.addparameterfunctiontype ( 'max',
	'Maximum value for the period specified by the valid time interval' );
</programlisting>
																
			</sect2>
			
			<sect2 id="sec:wci.addparameterfunctiontype.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getfunctionvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addplacepoint">
			<title>wci.addPlacePoint</title>
			
			<para>The function wci.addPlacePoint allows an administrator to add a new 
			place definition for a point to the WDB system.</para>
			
			<sect2 id="sec:wci.addplacepoint.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have write privileges on the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addplacepoint.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addplacepoint
(
	placeName				text,
	placeGeometry 			text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepoint.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addPlacePoint parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeName</entry>
								<entry>The name (in the defined namespace) of the Point to be insered into the database. 
								Note that the placeName will be replaced by a canonical placeName if the currently selected
								place name space is the zero (WDB core) name space.</entry>
							</row>
							<row>
								<entry>placeGeometry</entry>
								<entry>The point geometry to be inserted into the place definition tables.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepoint.result">
				<title>Expected Result</title>
				
				<para>The PlaceId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepoint.example">
				<title>Example</title>
				
				<para>An example setting up the place point "karasjok":</para>
				
				<programlisting>
SELECT wci.addplacepoint ( 'karasjok', st_geomfromtext('POINT( 25.51 69.47 )') );
</programlisting>
	
				<para>Adding this point to the database while logged into a place 
				name space other than zero, will add a point with the place name
				of 'karasjok' to the database and a canonical name in the zero
				name space. If the user was logged into the zero name space, 
				only the canonical name would be added to the database.  
				</para>
								
			</sect2>
			
			<sect2 id="sec:wci.addplacepoint.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepolygon</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.addplacepolygon">
			<title>wci.addPlacePolygon</title>
			
			<para>The function wci.addPlacePolygon allows an administrator to add a new 
			place definition for a polygon to the WDB system.</para>
			
			<sect2 id="sec:wci.addplacepolygon.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have write privileges on the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addplacepolygon.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addplacepolygon
(
	placeName				text,
	placeGeometry 			text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepolygon.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addPlacePolygon parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeName</entry>
								<entry>The name (in the defined namespace) of the Polygon to be insered into the database. 
								Note that the placeName will be replaced by a canonical placeName if the currently selected
								place name space is the zero (WDB core) name space.</entry>
							</row>
							<row>
								<entry>placeGeometry</entry>
								<entry>The point geometry to be inserted into the place definition tables.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepolygon.result">
				<title>Expected Result</title>
				
				<para>The PlaceId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addplacepolygon.example">
				<title>Example</title>
				
				<para>An example setting up a polygon for "square at nowhere":</para>
				
				<programlisting>
SELECT wci.addplaceplygon ( 'square at nowhere',
                            st_geomfromtext('POLYGON(() 10.0 61.3, 10.1 61.3, 10.1 61.4, 10.0 61.4, 10.0 61.3 ))') );
</programlisting>
	
				<para>Adding this polygon to the database while logged into a place 
				name space other than zero, will add a point with the place name
				of 'square at nowhere' to the database and a canonical name in the zero
				name space. If the user was logged into the zero name space, 
				only the canonical name would be added to the database.  
				</para>
								
			</sect2>
			
			<sect2 id="sec:wci.addplacepolygon.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addplaceregulargrid">
			<title>wci.addPlacerRegularGrid</title>
			
			<para>The function wci.addPlaceRegularGrid allows an administrator to add a new 
			place definition for a regular grid to the WDB system.</para>
			
			<sect2 id="sec:wci.addplaceregulargrid.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have write privileges on the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addplaceregulargrid.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addplaceregulargrid
(
	placeName	 	text,
	numX	 		int,
	numY	 		int,
	incX	 		float,
	incY	 		float,
	startX		 	float,
	startY		 	float,
	projection		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addplaceregulargrid.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addPlaceRegularGrid parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeName</entry>
								<entry>The name (in the defined namespace) of the grid to be insered into the database. 
								Note that the placeName will be replaced by a canonical placeName if the currently selected
								place name space is the zero (WDB core) name space.</entry>
							</row>
							<row>
								<entry>numX</entry>
								<entry>The number of points along the X axis of the grid.</entry>
							</row>
							<row>
								<entry>numY</entry>
								<entry>The number of points along the Y axis of the grid.</entry>
							</row>
							<row>
								<entry>incX</entry>
								<entry>The distance between any two points on the X axis of the grid. The unit of measure is given by the projection.</entry>
							</row>
							<row>
								<entry>incY</entry>
								<entry>The distance between any two points on the Y axis of the grid. The unit of measure is given by the projection.</entry>
							</row>
							<row>
								<entry>startX</entry>
								<entry>The origin X point (lower left corner) of the grid in the specified projection.</entry>
							</row>
							<row>
								<entry>startY</entry>
								<entry>The origin Y point (lower left corner) of the grid in the specified projection.</entry>
							</row>
							<row>
								<entry>projection</entry>
								<entry>The original projection of the grid, which also corresponds to the form it is stored as in the database..</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addplaceregulargrid.result">
				<title>Expected Result</title>
				
				<para>The PlaceId (key reference number).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addplaceregulargrid.example">
				<title>Example</title>
				
				<para>An example setting up the hirlam 10km grid:</para>
				
				<programlisting>
SELECT wci.addplaceregulargrid ( 'hirlam 10km grid', 248, 400, 0.100, 0.100, 5.75, -13.25, '+proj=ob_tran +o_proj=longlat +lon_0=-40 +o_lat_p=22 +a=6367470.0 +no_defs' );
</programlisting>
	
				<para>Adding this grid to the database while logged into a place 
				name space other than zero, will add a grid with the place name
				of 'hirlam 10km grid' to the database and a canonical name in the zero
				name space. If the user was logged into the zero name space, 
				only the canonical name would be added to the database.  
				</para>
								
			</sect2>
			
			<sect2 id="sec:wci.addplaceregulargrid.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addsrid">
			<title>wci.addSrid</title>
			
			<para>The function wci.addSrid allows an administrator to add a new 
			SRID definition to WDB.</para>
			
			<sect2 id="sec:wci.addsrid.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have write privileges on the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addsrid.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addsrid
(
	name				text,
	projection			text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addsrid.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addSrid parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>name</entry>
								<entry>A descriptive name for the projection.</entry>
							</row>
							<row>
								<entry>projection</entry>
								<entry>The Proj.4 definition of the projection. To avoid
								duplicates, the Proj.4 definition should avoid unnecessary
								spacing and be ended with +no_defs. It is advised to manually
								check the spatial_ref_sys table (using wci.getSrid) before
								adding new entries.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addsrid.result">
				<title>Expected Result</title>
				
				<para>The SRID (spatial reference id).</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addsrid.example">
				<title>Example</title>
				
				<para>An example setting up the SRID of the Hirlam 10 grid (a rotated,
					longitude/latitude projection:</para>
				
				<programlisting>
SELECT wci.addsrid ( 'Hirlam 10 SRID',
	'+proj=ob_tran +o_proj=longlat +lon_0=-40 +o_lat_p=22 +a=6367470.0 +no_defs');
</programlisting>
	
			</sect2>
			
			<sect2 id="sec:wci.addsrid.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		
		<sect1 id="sec:wci.addunit">
			<title>wci.addUnit</title>
			
			<para>The function wci.addUnit allows an administrator to add a 
			new unit to WDB.</para>
			
			<sect2 id="sec:wci.addunit.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addunit.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addunit
(
	unitname					character varying,
	unittype					character varying,
	measure						character varying,
	description					character varying,
	siunitconversioncoefficient	double,
	siunitconversionterm		double
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addunit.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addUnit parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>unitName</entry>
								<entry>The UCUM designation of the unit.</entry>
							</row>
							<row>
								<entry>unitType</entry>
								<entry>The type of the unit. Permitted types are: 
								'SI Unit', 'Base Unit', and 'Conventional Unit'. Most
								units should be defined as the latter. 
								</entry>
							</row>
							<row>
								<entry>measure</entry>
								<entry>The associated measure of the unit.</entry>
							</row>
							<row>
								<entry>description</entry>
								<entry>A description of the unit. For most units, this
								will simply be the unabbreviated (i.e., full) form of 
								the unit name.</entry>
							</row>
							<row>
								<entry>siunitconversioncoefficient</entry>
								<entry>The coefficient to multiply the value with in order
								to get the SI unit. The SI unit conversion is: 
								(value * coefficient) + term</entry>
							</row>
							<row>
								<entry>siunitconversionterm</entry>
								<entry>The term to add to the value in order to get the
								SI unit. The SI unit conversion is: (value * coefficient) + term</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addunit.result">
				<title>Expected Result</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addunit.example">
				<title>Example</title>
				
				<para>An example adding the degree Fahrenheit to the database:</para>
				
				<programlisting>
SELECT wci.addunit( '[degF]', 'Conventional Unit', 'temperature', 'degree Fahrenheit', 0.555556, 459.67 );
</programlisting>
								
				
				<para>An example adding the Kelvin to the database:</para>
				
				<programlisting>
SELECT wci.addunit( 'K', 'SI Unit', 'temperature', 'Kelvin', 1, 0 );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.addunit.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasure</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.addvalueparameterusage">
			<title>wci.addValueParameterUsage</title>
			
			<para>The function wci.addValueParameterUsage allows an administrator to add new 
			Value Parameter usages to the WDB system.</para>
			
			<sect2 id="sec:wci.addvalueparameterusage.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addvalueparameterusage.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addvalueparameterusage
(
	valueParameterUsage		text,
	valueDescription		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addvalueparameterusage.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addLevelParameterUsage parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueParameterUsage</entry>
								<entry>A usage dimension for a value parameter.</entry>
							</row>
							<row>
								<entry>valueDescription</entry>
								<entry>A description of the usage dimension.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addvalueparameterusage.result">
				<title>Expected Result</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addvalueparameterusage.example">
				<title>Example</title>
				
				<para>An example adding the 'mean sea level' value usage 
				to the database:</para>
				
				<programlisting>
SELECT wci.addvalueparameterusage ( 'mean sea level', 
			'Value reduced to sea level assuming an isothermal layer at the measuring point's temperature.' );
</programlisting>
			
			</sect2>
			<sect2 id="sec:wci.addvalueparameterusage.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.getvalueparameterusage</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.addwciuser">
			<title>wci.addWciUser</title>
			
			<para>The function wci.addWciuser allows an administrator to add a 
			WCI user to the database as a data provider in WDB.</para>
			
			<sect2 id="sec:wci.addwciuser.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.addwciuser.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.addwciuser
(
	dataProviderName		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.addwciuser.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.addWciUser parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviderName</entry>
								<entry>The data provider name to be added to the database as a WCI user.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.addwciuser.result">
				<title>Expected Result</title>
				
				<para>The DataProviderId (key reference number) of the inserted data provider.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.addwciuser.example">
				<title>Example</title>
				
				<para>An example adding the wci user "michael" as a new data provider:</para>
				
				<programlisting>
SELECT wci.addwciuser( 'michael' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.addwciuser.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovider</para></listitem>
					<listitem><para>wci.adddataprovidertogroup</para></listitem>
					<listitem><para>wci.getdataprovider</para></listitem>
					<listitem><para>wci.getdataprovidername</para></listitem>
					<listitem><para>wci.setdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		
		<sect1 id="sec:wci.begin">
			<title>wci.begin</title>
			
			<para>The function wci.begin initializes the WDB Call Interface for a
				specified user.</para>
			
			<sect2 id="sec:wci.begin.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have been set up as a WDB user (i.e., have access to one 
							of the wdb user groups</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.begin.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.begin 
(
	user                    name,
	dataproviderNameSpaceId integer,
	placeNameSpaceId        integer,
	parameterNameSpaceId    integer
)
</programlisting>
				
	<programlisting>
wci.begin (
	user                    name
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.begin.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.begin parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>user</entry>
								<entry>The userid to initialize the connection
									with</entry>
							</row>
							<row>
								<entry>dataprovidernamespaceid</entry>
								<entry>The namespace to be used for dataprovider
									names in the session</entry>
							</row>
							<row>
								<entry>placenamespaceid</entry>
								<entry>The namespace to be used for place
									names in the session</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The namespace to be used for parameter
									names in the session</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.begin.result">
				<title>Expected Result</title>
				
				<para>No return expected.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.begin.example">
				<title>Example</title>
				
				<para>An example setting up the user "michael" with the data provider and parameter name
				spaces associated with the code 1, while retaining use of the default place names:</para>
				
				<programlisting>
SELECT wci.begin ( 'michael', 1, 0, 1 );
</programlisting>
								
				<para>Note that the default namespaces can be defined by the WDB administrator. Consequently,
					the user may frequently want to just install using this namespace, which would be done
				with the following wci.begin call:</para>

				<programlisting>
SELECT wci.begin ( 'michael' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.begin.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.end</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.browse">
			<title>wci.browse</title>
			
			<para>The wci.browse function is utilized to browse the meteorological, 
				hydrological and oceanographic data in the database. Essentially, it 
				can be used to retrieve summary data about what data values exist in
				the database. The function takes as input the same search parameters as the
				wci.read call, but returns summarized rather than detailed data about the
				values in the database. Using wci.browse will usually be significantly
				faster than performing a similar wci.read call followed by
				aggregation.</para>
			
			<para>The function is overloaded, and exists in many different versions,
				depending on the return type required.</para>
			
			<sect2 id="sec:wci.browse.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have access to group role wdb_read</para>
					</listitem>
					<listitem>
						<para>The user must have called wci.begin</para>
					</listitem>
				</itemizedlist>
				
			</sect2>
			
			<sect2 id="sec:wci.browse:syntax">
				<title>Syntax</title>
				
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browsedataprovider
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browsedataprovider
)
			</programlisting>				
													
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browseplace
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browseplace
)
			</programlisting>				
								
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browsereferencetime
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browsereferencetime
)
			</programlisting>				
												
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browsevalidtime
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browsevalidtime
)
			</programlisting>				
								
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browsevalueparameter
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browsevalueparameter
)
			</programlisting>				
				
				<programlisting>
wci.browse
(
	dataProviders  ARRAY[text],
	place          text,
	referenceTime  text,
	validtime      text,
	parameters     ARRAY[text],
	level          text,
	dataVersions   ARRAY[integer],
	returnType     wci.browselevelparameter
)
			</programlisting>

				<programlisting>
wci.browse
(
	returnType     wci.browselevelparameter
)
			</programlisting>				
								
			</sect2>
			
			<sect2 id="sec:wci.browse.parameters">
				<title>Parameters</title>
				
				<para>All the wci.browse input parameters, except the returnType, are
					precisely the same as the input paramaters to a wci.read call (see
					Section <xref linkend="sec:wci.read:parameters"></xref>). Calling a function
					with only the "returnType" parameter specified is basically equivalent 
					to calling the wci.browse function with all NULLs (indicating that 
					all data is required). Be aware that trying to retrieve aggregates about
					all the data in a huge database can take a while. 
					</para>
				
				<para>The returnType specifies which of the six different types of
					summarized metadata the user wants to retrieve.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.browse.result">
				<title>Expected Result</title>
				
				<para>Depending on the returnType specified:</para>
				
				<itemizedlist>
					<listitem>
						<para>wci.browsedataprovider</para>
						<para>This returns a list of the data providers that exist in the
							database for the parameter definitions given in the
							wci.browse call and the utilized namespace. For each
							dataprovider, the number of data records and the earliest and
							latest referencetimes that exist for that data value is also
							listed.</para>
					</listitem>
					<listitem>
						<para>wci.browseplace</para>
						<para>This returns a list of the place definitions that exist in
							the database for the parameter definitions given by the
							wci.browse call and the used namespace. For each place
							definition, the number of data records in the database are
							listed.</para>
					</listitem>
					<listitem>
						<para>wci.browsereferencetime</para>
						<para>This returns a list of the referencetimes that exist in the
							database for the parameter definitions given by the
							wci.browse call. For each referencetime, the number of data
							records in the database are listed.</para>
					</listitem>
					<listitem>
						<para>wci.browsevalidtime</para>
						<para>This returns a list of the validtimes that exist in the
							database for the parameter definitions given by the
							wci.browse call. For each validtime, the number of data
							records in the database are listed.</para>
					</listitem>
					<listitem>
						<para>wci.browsevalueparameter</para>
						<para>This returns a list of the value parameters that exist in the
							database for the parameter definitions given by the
							wci.browse call and the used namespace. For each
							valueparameter, the number of data records in the database
							are listed.</para>
					</listitem>
					<listitem>
						<para>wci.browselevelparameter</para>
						<para>This returns a list of the level parameters that exist in the
							database for the parameter definitions given by the
							wci.browse call and the utilized namespace. For each level
							parameter, the number of data records in the database are
							listed.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.browse.example">
				<title>Example</title>
				
				<para>The following browse query could be used to retrieve the data provider names 
					of all data providers in the database.</para>
				
				<programlisting>
SELECT * FROM wci.browse ( NULL::wci.browsedataprovider );					
				</programlisting>
				
				<para>The user might then utilize a result from this query to ask a 
					follow-up determining the reference times of  a specific data provider.</para>
				
				<programlisting>
SELECT * FROM wci.browse ( ARRAY[ 'hirlam' ], 
						   NULL, NULL, NULL, NULL, NULL, NULL,
					       NULL::wci.browsereferencetime );   					
				</programlisting>

				<para>The results from this query (a list of referencetimes), can then be used to
					drill down further into the data mass of the database. The following example 
					retrieves the list of parameters for the given data provider and reference time.
				</para>				
				
				<programlisting>
SELECT * FROM wci.browse ( ARRAY[ 'hirlam' ], NULL, 
						   'exact 1980-03-15 12:00:00+00', 
						   NULL, NULL, NULL, NULL,
					       NULL::wci.browsevalueparameter );
				</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.browse.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.read</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>				


		<sect1 id="sec:wci.configuration">
			<title>wci.configuration</title>
			
			<para>The wci.configuration function returns all configuration
			information (i.e., the complete list of all versions installed)
			for the WDB database.</para>
			
			<sect2 id="sec:wci.configuration.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.configuration.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.configuration
(
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.configuration.parameters">
				<title>Parameters</title>

				<para>None.</para>				
				
			</sect2>
			
			<sect2 id="sec:wci.configuration.result">
				<title>Expected Result</title>
				
				<para>Configuration information.</para>

				<table frame="all">
					<title>wci.configuration return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>name</entry>
								<entry>The name of the software package.</entry>
							</row>
							<row>
								<entry>softwareversion</entry>
								<entry>The version of the software.</entry>
							</row>
							<row>
								<entry>packageversion</entry>
								<entry>The version of the package; this is a sequential
									number independent of the software version.</entry>
							</row>
							<row>
								<entry>description</entry>
								<entry>A description of the software package.</entry>
							</row>
							<row>
								<entry>installtime</entry>
								<entry>The time when this version of WDB was installed.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.configuration.example">
				<title>Example</title>
				
				<para>An example to extract the configuration of the database:</para>
				
				<programlisting>
SELECT wci.configuration ( ); 
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.configuration.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.version</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.end">
			<title>wci.end</title>
			
			<para>The function wci.end unsets any settings and frees up resources that may
				have been initialized by wci.begin.</para>
			
			<sect2 id="sec:wci.end.prereq">
				<title>Prerequisites</title>

				<para>None.</para>				
			</sect2>
			
			<sect2 id="sec:wci.end.syntax">
				<title>Syntax</title>
				
				<programlisting>
wci.end 
(
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.end.parameters">
				<title>Parameters</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.end.result">
				<title>Expected Result</title>
				
				<para>No return expected.</para>
				
			</sect2>
			
			<sect2  id="sec:wci.end.example">
				<title>Example</title>
				
				<para>The wci.end function is just a simple functional call:</para>
				
				<programlisting>
SELECT wci.end ( );
</programlisting>				
			</sect2>
			
			<sect2 id="sec:wci.end.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.begin</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>
			
		<sect1 id="sec:wci.fetch">
			<title>wci.fetch</title>
			
			<para>wci.fetch is the function used to retrieve binary data values from the database.
				The function takes a binary object ID returned by a wci.read call and returns
				a row containing the binary data (as bytea data) as well as additional relevant
				information required for the manipulation of the binary data.</para>
				
				<para>The returned binary data should be interpreted as 4-byte floats. Some of the data 
				may have the value not-a-number. This means that that particular point does not have any 
				defined value.</para>
					
			<sect2 id="sec:wci.fetch:prerequisites">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have a valid object ID that references a grid</para>
					</listitem>
					<listitem>
						<para>The user must have access to group role wdb_read</para>
					</listitem>
					<listitem>
						<para>The user must have called wci.begin</para>
					</listitem>
				</itemizedlist>
				
			</sect2>
			
			<sect2 id="sec:wci.fetch:syntax">
				<title>Syntax</title>
				
				<programlisting>
wci.fetch
(
          objectid       bigint,
          returnType     wci.grid
)
			</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.fetch:parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.fetch parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>objectid</entry>
								<entry>The object ID of the binary object to be returned,
									as given by a wci.read call</entry>
							</row>
							<row>
								<entry>returnType</entry>
								<entry>What type of data the user wants
									returned</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.fetch:expected_result">
				<title>Expected Result</title>
				
				<para>Currently, the function always returns a:</para>
				
				<itemizedlist>
					<listitem>
						<para>wci.grid</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.fetch:examples">
				<title>Examples</title>
				
				<para>The following query returns the grid referenced as 11702:</para>
				
			<programlisting>
SELECT * 
FROM wci.fetch ( 11702, 
				 NULL::wci.grid -- Return type
               )
		</programlisting>
			
			<para>The result is a single row containing the binary data of the grid itself (as a bytea),
				in addition to the number of points along the x and y axis of the grid, the distance 
				between grid increments, the starting positions of the x and y points in the original
				projection, and the PROJ.4 string defining the original projection of the grid.</para>
			
			</sect2>

			<sect2 id="sec:wci.fetch:see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.read</para>
					</listitem>
					<listitem>
						<para>wci.write</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>		


		<sect1 id="sec:wci.getcodelevelparameter">
			<title>wci.getCodeLevelParameter</title>
			
			<para>The function wci.getCodeLevelParameter returns information about the 
			specified level parameter of the code type to the user.</para>
			
			<sect2 id="sec:wci.getcodelevelparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getcodelevelparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getcodelevelparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodelevelparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getCodeLevelParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all level parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodelevelparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the level parameter in the namespace.</para>

				<table frame="all">
					<title>wci.getCodeLevelParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>levelparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>levelcodeparametername</entry>
								<entry>The canonical name of the level parameter.</entry>
							</row>
							<row>
								<entry>codeparameterreference</entry>
								<entry>The reference information for the level code.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>levelparametername</entry>
								<entry>The name of the level parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical level parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodelevelparameter.example">
				<title>Example</title>
				
				<para>An example to get information about code "hybrid level":</para>
				
				<programlisting>
SELECT wci.getcodelevelparameter ( 'hybrid level' );
</programlisting>

				<para>To retrieve information about all code level parameters starting with "hybrid":</para>

				<programlisting>
SELECT wci.getcodelevelparameter ( 'hybrid%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getcodelevelparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addcodelevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getcodevalueparameter">
			<title>wci.getCodeValueParameter</title>
			
			<para>The function wci.getCodeValueParameter returns information about the 
			specified value parameter of the code type to the user.</para>
			
			<sect2 id="sec:wci.getcodevalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getcodevalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getcodevalueparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodevalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getCodeValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all value parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodevalueparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the value parameter in the namespace.</para>

				<table frame="all">
					<title>wci.getCodeValueParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>valuecodeparametername</entry>
								<entry>The canonical name of the value parameter.</entry>
							</row>
							<row>
								<entry>codeparameterreference</entry>
								<entry>The reference information for the value code.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>valueparametername</entry>
								<entry>The name of the value parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getcodevalueparameter.example">
				<title>Example</title>
				
				<para>An example to get information about code "ice presence":</para>
				
				<programlisting>
SELECT wci.getcodevalueparameter ( 'ice presence' );
</programlisting>

				<para>To retrieve information about all code value parameters starting with "ice":</para>

				<programlisting>
SELECT wci.getcodevalueparameter ( 'ice%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getcodevalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addcodevalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getdataprovider">
			<title>wci.getDataProvider</title>
			
			<para>The function wci.getDataProvider returns information about the 
			specified data provider to a user.</para>
			
			<sect2 id="sec:wci.getdataprovider.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getdataprovider.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getdataprovider
(
	dataProviderName		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovider.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getDataProvider parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviderName</entry>
								<entry>The data provider name to be added to be returned. 
								NULL returns all data providers in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovider.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the Data Provider in the namespace.</para>

				<table frame="all">
					<title>wci.getDataProvider return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataproviderid</entry>
								<entry>The internal data provider ID used in WDB.</entry>
							</row>
							<row>
								<entry>dataprovidertype</entry>
								<entry>The type classification of the data provider in WDB.</entry>
							</row>
							<row>
								<entry>spatialdomaindelivery</entry>
								<entry>The spatial domain of data delivered by this data provider;
									either point data, gridded data, or both.</entry>
							</row>
							<row>
								<entry>dataprovidernamespaceid</entry>
								<entry>The currently selected data provider name space.</entry>
							</row>
							<row>
								<entry>dataprovidername</entry>
								<entry>The data provider name of the data provider in this namespace.</entry>
							</row>
							<row>
								<entry>dataprovidernameleftset</entry>
								<entry>An internal WDB code used for grouping.</entry>
							</row>
							<row>
								<entry>dataprovidernamerightset</entry>
								<entry>An internal WDB code used for grouping.</entry>
							</row>
							<row>
								<entry>dataproviderstoretime</entry>
								<entry>The store time of this data provider; i.e., when it 
								was inserted into the database.</entry>
							</row>
							<row>
								<entry>dataprovidercomment</entry>
								<entry>Additional description or comment about the data 
								provider.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovider.example">
				<title>Example</title>
				
				<para>An example to get information about data provider "michael":</para>
				
				<programlisting>
SELECT wci.getdataprovider ( 'michael' );
</programlisting>

				<para>To retrieve information about all data providers starting with "mich":</para>

				<programlisting>
SELECT wci.getdataprovider ( 'mich%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getdataprovider.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovider</para></listitem>
					<listitem><para>wci.adddataprovider2group</para></listitem>
					<listitem><para>wci.addwciuser</para></listitem>
					<listitem><para>wci.getdataprovidername</para></listitem>
					<listitem><para>wci.setdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getdataprovidername">
			<title>wci.getDataProviderName</title>
			
			<para>The function wci.getDataProviderName lists the data provider names in the namespace
			that match the search criteria.</para>
			
			<sect2 id="sec:wci.getdataprovidername.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getdataprovidername.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getdataprovidername
(
	dataprovidername		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovidername.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getDataProviderName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviderName</entry>
								<entry>The data provider name for which information is requested. 
								NULL returns all data providers in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovidername.result">
				<title>Expected Result</title>
				
				<para>The list of data provider names.</para>

				<table frame="all">
					<title>wci.getDataProviderName return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataproviderid</entry>
								<entry>The internal data provider ID used in WDB.</entry>
							</row>
							<row>
								<entry>dataprovidernamespaceid</entry>
								<entry>The currently selected data provider name space.</entry>
							</row>
							<row>
								<entry>dataprovidername</entry>
								<entry>The data provider name of the data provider in this namespace.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdataprovidername.example">
				<title>Example</title>
				
				<para>An example to list the data provider matching the name "michael":</para>
				
				<programlisting>
SELECT wci.getdataprovidername ( 'michael' );
</programlisting>

				<para>List all data providers starting on "mich" in the name space:</para>

				<programlisting>
SELECT wci.getdataprovidername ( 'mich%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getdataprovidername.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovider</para></listitem>
					<listitem><para>wci.adddataprovider2group</para></listitem>
					<listitem><para>wci.addwciuser</para></listitem>
					<listitem><para>wci.getdataprovider</para></listitem>
					<listitem><para>wci.setdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getdimensionlessvalueparameter">
			<title>wci.getDimensionlessValueParameter</title>
			
			<para>The function wci.getDimensionlessValueParameter returns information about the 
			specified value parameter of the dimensionless type to the user.</para>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getdimensionlessvalueparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getDimensionlessValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all value parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the value parameter in the namespace.</para>

				<table frame="all">
					<title>wci.getDimensionlessValueParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>valuedimensionlessparametername</entry>
								<entry>The canonical name of the value parameter.</entry>
							</row>
							<row>
								<entry>valueparameterdescription</entry>
								<entry>A description of the value parameter.</entry>
							</row>
							<row>
								<entry>valueunitname</entry>
								<entry>The unit of the value parameter.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>valueparametername</entry>
								<entry>The name of the value parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.example">
				<title>Example</title>
				
				<para>An example to get information about the parameter "land albedo":</para>
				
				<programlisting>
SELECT wci.getdimensionlessvalueparameter ( 'land albedo' );
</programlisting>

				<para>To retrieve information about all code value parameters starting with "land":</para>

				<programlisting>
SELECT wci.getdimensionlessvalueparameter ( 'land%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getdimensionlessvalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddimensionlessvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getfunctionvalueparameter">
			<title>wci.getFunctionValueParameter</title>
			
			<para>The function wci.getFunctionValueParameter returns information about the 
			specified value parameter of the function type to the user.</para>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getfunctionvalueparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getFunctionValueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all value parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the value parameter in the namespace.</para>

				<table frame="all">
					<title>wci.getfunctionValueParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>parameterfunctiontype</entry>
								<entry>The parameter function.</entry>
							</row>
							<row>
								<entry>valueparameterusage</entry>
								<entry>The value parameter usage.</entry>
							</row>
							<row>
								<entry>parameterquantitytype</entry>
								<entry>The quantity type of the value parameter.</entry>
							</row>
							<row>
								<entry>measure</entry>
								<entry>The measure of the value parameter.</entry>
							</row>
							<row>
								<entry>valueunitname</entry>
								<entry>The unit name used for the value parameter.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>valueparametername</entry>
								<entry>The name of the value parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.example">
				<title>Example</title>
				
				<para>An example to get information about the parameter "peak wave duration":</para>
				
				<programlisting>
SELECT wci.getfunctionvalueparameter ( 'peak wave duration' );
</programlisting>

				<para>To retrieve information about all value parameters starting with "peak":</para>

				<programlisting>
SELECT wci.getfunctionvalueparameter ( 'peak%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getfunctionvalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addfunctionvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getlevelparameter">
			<title>wci.getLevelParameter</title>
			
			<para>The function wci.getLevelParameter returns information about the 
			specified level parameter of the function type to the user.</para>
			
			<sect2 id="sec:wci.getlevelparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getlevelparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getLevelParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all value parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the level parameters in the namespace.</para>

				<table frame="all">
					<title>wci.getlevelParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>levelparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>levelparametername</entry>
								<entry>The name of the level parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
							<row>
								<entry>levelunitname</entry>
								<entry>The unit of the level parameter.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameter.example">
				<title>Example</title>
				
				<para>An example to get information about the level parameter "hybrid level":</para>
				
				<programlisting>
SELECT wci.getlevelparameter ( 'hybrid level' );
</programlisting>

				<para>To retrieve information about all level parameters with "hybrid":</para>

				<programlisting>
SELECT wci.getlevelparameter ( '%hybrid%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addcodelevelparameter</para></listitem>
					<listitem><para>wci.addmeasurelevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getlevelparameterusage">
			<title>wci.getlevelparameterusage</title>
			
			<para>The function wci.getlevelparameterusage returns information about the 
			specified level parameter usage to the user.</para>
			
			<sect2 id="sec:wci.getlevelparameterusage.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameterusage.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getlevelparameterusage
(
	usage		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameterusage.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getlevelparameterusage parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>usage</entry>
								<entry>The name of the parameter usage to be returned. 
								NULL returns all parameter usages. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameterusage.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the level parameter usages.</para>

				<table frame="all">
					<title>wci.getlevelparameterusage return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>levelparameterusage</entry>
								<entry>The level parameter usage descriptor.</entry>
							</row>
							<row>
								<entry>levelparameterusagedescription</entry>
								<entry>A description of the level parameter usage.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameterusage.example">
				<title>Example</title>
				
				<para>An example to get information about the level usage "sea surface":</para>
				
				<programlisting>
SELECT wci.getlevelparameterusage ( 'sea surface' );
</programlisting>

				<para>To retrieve information about all level usages with "sea":</para>

				<programlisting>
SELECT wci.getlevelparameterusage ( '%sea%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getlevelparameterusage.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addlevelparameterusage</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getmeasure">
			<title>wci.getMeasure</title>
			
			<para>The function wci.getMeasure returns information about the 
			specified measure to the user.</para>
			
			<sect2 id="sec:wci.getmeasure.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getmeasure.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getmeasure
(
	measure		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasure.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getmeasure parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>measure</entry>
								<entry>The name of the measure to be returned. 
								NULL returns all measures. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasure.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the measure.</para>

				<table frame="all">
					<title>wci.getmeasure return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>measure</entry>
								<entry>The measure being described.</entry>
							</row>
							<row>
								<entry>distancepower</entry>
								<entry>The distance dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>masspower</entry>
								<entry>The mass dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>timepower</entry>
								<entry>The time dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>luminositypower</entry>
								<entry>The luminosity dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>electriccurrentpower</entry>
								<entry>The electric current dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>temperaturepower</entry>
								<entry>The temperature dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>substancepower</entry>
								<entry>The substance dimension of the measure. Use 0 to denote none.</entry>
							</row>
							<row>
								<entry>anglepower</entry>
								<entry>The angular dimension of the measure. Use 0 to denote none.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasure.example">
				<title>Example</title>
				
				<para>An example to get information about the measure "distance":</para>
				
				<programlisting>
SELECT wci.getmeasure ( 'distance' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.getmeasure.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasure</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getmeasurelevelparameter">
			<title>wci.getMeasureLevelParameter</title>
			
			<para>The function wci.getmeasurelevelParameter returns information about the 
			specified level parameter of the function type to the user.</para>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getmeasurelevelparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getMeasureLevelParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all level parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the level parameters in the namespace.</para>

				<table frame="all">
					<title>wci.getmeasurelevelParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>levelparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>levelparameterusage</entry>
								<entry>The usage of the level parameter.</entry>
							</row>
							<row>
								<entry>measure</entry>
								<entry>The measure of the level parameter.</entry>
							</row>
							<row>
								<entry>levelunitname</entry>
								<entry>The unit of the level parameter.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>levelparametername</entry>
								<entry>The name of the level parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.example">
				<title>Example</title>
				
				<para>An example to get information about the level parameter "sea surface pressure":</para>
				
				<programlisting>
SELECT wci.getmeasurelevelparameter ( 'sea surface pressure' );
</programlisting>

				<para>To retrieve information about all level parameters with "sea":</para>

				<programlisting>
SELECT wci.getmeasurelevelparameter ( '%sea%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getmeasurelevelparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasurelevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.getmeasurevalueparameter">
			<title>wci.getMeasureValueParameter</title>
			
			<para>The function wci.getmeasurevalueParameter returns information about the 
			specified value parameter of the function type to the user.</para>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getmeasurevalueparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getMeasurevalueParameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the parameter to be returned. 
								NULL returns all value parameters in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the value parameters in the namespace.</para>

				<table frame="all">
					<title>wci.getMeasurevalueParameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueparameterid</entry>
								<entry>The internal parameter ID used in WDB.</entry>
							</row>
							<row>
								<entry>valueparameterusage</entry>
								<entry>The usage of the value parameter.</entry>
							</row>
							<row>
								<entry>parameterquantitytype</entry>
								<entry>The quantity type of the value parameter.</entry>
							</row>
							<row>
								<entry>measure</entry>
								<entry>The measure of the value parameter.</entry>
							</row>
							<row>
								<entry>valueunitname</entry>
								<entry>The unit of the value parameter.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The parameter name space ID of the query.</entry>
							</row>
							<row>
								<entry>valueparametername</entry>
								<entry>The name of the value parameter in the current namespace.
									If the query is in the 0 (canonical) namespace, this will
									be the canonical value parameter name.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.example">
				<title>Example</title>
				
				<para>An example to get information about the value parameter "air temperature":</para>
				
				<programlisting>
SELECT wci.getmeasurevalueparameter ( 'air temperature' );
</programlisting>

				<para>To retrieve information about all temperature parameters:</para>

				<programlisting>
SELECT wci.getmeasurevalueparameter ( '%temperature%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getmeasurevalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addmeasurevalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getparameterfunctiontype">
			<title>wci.getParameterFunctionType</title>
			
			<para>The function wci.getparameterfunctiontype returns information about the 
			specified parameterfunctiontype to the user.</para>
			
			<sect2 id="sec:wci.getparameterfunctiontype.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getparameterfunctiontype.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getparameterfunctiontype
(
	type		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getparameterfunctiontype.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getparameterfunctiontype parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>type</entry>
								<entry>The name of the parameterfunctiontype to be returned. 
								NULL returns all types. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getparameterfunctiontype.result">
				<title>Expected Result</title>
				
				<para>A row of data describing the parameterfunctiontype.</para>

				<table frame="all">
					<title>wci.getparameterfunctiontype return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameterfunctiontype</entry>
								<entry>The parameterfunctiontype being described.</entry>
							</row>
							<row>
								<entry>parameterfunctiondescription</entry>
								<entry>A description of the parameter function type.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getparameterfunctiontype.example">
				<title>Example</title>
				
				<para>An example to get information about the parameterfunctiontype "accumulated":</para>
				
				<programlisting>
SELECT wci.getparameterfunctiontype ( 'accumulated' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.getparameterfunctiontype.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addparameterfunctiontype</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getplacedefinition">
			<title>wci.getPlaceDefinition</title>
			
			<para>The function wci.getPlaceDefinition lists the place 
			definitions defined in the database that match the search 
			criteria and are available in the namespace.</para>
			
			<sect2 id="sec:wci.getplacedefinition.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getplacedefinition.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getplacedefinition
(
	placename		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacedefinition.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getPlaceDefinition parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placename</entry>
								<entry>The placename that you require information for.  
								NULL returns all place definitions in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacedefinition.result">
				<title>Expected Result</title>
				
				<para>The list of place definitions.</para>

				<table frame="all">
					<title>wci.getPlaceDefinition return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeid</entry>
								<entry>The internal place ID used in WDB.</entry>
							</row>
							<row>
								<entry>placegeometrytype</entry>
								<entry>The place geometry of the place definition. Currently points and grids
									are supported</entry>
							</row>
							<row>
								<entry>placegeometry</entry>
								<entry>The geometry of the place definition in the default SRID. Note that
									for regular grids, only a polygon of the four corner points is stored
									in this field.</entry>
							</row>
							<row>
								<entry>placeindeterminatecode</entry>
								<entry>The indeterminate code for the place definition.</entry>
							</row>
							<row>
								<entry>placenamespaceid</entry>
								<entry>The name space of the query.</entry>
							</row>
							<row>
								<entry>placename</entry>
								<entry>The place name of the place definition.</entry>
							</row>
							<row>
								<entry>originalsrid</entry>
								<entry>The original SRID of the place definition. This is particularly
									important to keep track of for grids.</entry>
							</row>
							<row>
								<entry>placestoretime</entry>
								<entry>The storetime of the place definition.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getplacedefinition.example">
				<title>Example</title>
				
				<para>An example to list the place definitions matching the name "oslo":</para>
				
				<programlisting>
SELECT wci.getplacedefinition ( 'oslo' );
</programlisting>

				<para>List all place definitions starting on "os" in the name space:</para>

				<programlisting>
SELECT wci.getplacedefinition ( 'os%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getplacedefinition.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.getplacename">
			<title>wci.getPlaceName</title>
			
			<para>The function wci.getPlaceName lists the place 
			names defined in the database that match the search 
			criteria and are available in the namespace.</para>
			
			<sect2 id="sec:wci.getplacename.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getplacename.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getplacename
(
	placename		text
)
</programlisting>

				<programlisting>
wci.getplacename
(
	numberX 			int,
	numberY 			int,
	incrementX 			float,
	incrementY 			float,
	startX	 			float,
	startY	 			float,
	projdefinition	 	text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacename.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getPlaceName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placename</entry>
								<entry>The placename that you require information for.  
								NULL returns all place names in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
							<row>
								<entry>numberx</entry>
								<entry>The number of points along the x axis in the regular
									grid.</entry>
							</row>
							<row>
								<entry>numbery</entry>
								<entry>The number of points along the y axis in the regular
									grid.</entry>
							</row>
							<row>
								<entry>incrementx</entry>
								<entry>The increment distance on the x axis; i.e., the distance
									between two adjacent points on the x axis. The unit of the
									attribute is given by the Proj.4, which means that it is
									usually either degrees (the default) or meters.</entry>
							</row>
							<row>
								<entry>incrementy</entry>
								<entry>The increment distance on the y axis.</entry>
							</row>
							<row>
								<entry>startx</entry>
								<entry>The starting point of the grid on the x axis of the 
								original Proj.4 projection.</entry>
							</row>
							<row>
								<entry>starty</entry>
								<entry>The starting point of the grid on the y axis of the
								original Proj.4 projection.</entry>
							</row>
							<row>
								<entry>projdefinition</entry>
								<entry>The original PROJ.4 projection of the place definition.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacename.result">
				<title>Expected Result</title>
				
				<para>The list of place grids.</para>

				<table frame="all">
					<title>wci.getPlaceName return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeid</entry>
								<entry>The internal place ID used in WDB.</entry>
							</row>
							<row>
								<entry>placenamespaceid</entry>
								<entry>The name space of the query.</entry>
							</row>
							<row>
								<entry>placename</entry>
								<entry>The place name of the place definition.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getplacename.example">
				<title>Example</title>
				
				<para>An example to list the placenames matching "osl":</para>
				
				<programlisting>
SELECT wci.getplacename ( 'osl%' );
</programlisting>

				<para>List the place grid matching a set of attributes:</para>

				<programlisting>
SELECT wci.getplacename ( 248, 
						  400,
						  0.5,
						  0.5,
						  35.6,
						  -25.4,
						  "+proj=longlat +a=6367470.0 +towgs84=0,0,0 +no_defs" );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getplacename.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>
		
		<sect1 id="sec:wci.getplacepoint">
			<title>wci.getPlacePoint</title>
			
			<para>The function wci.getPlacePoint lists all the place 
			points defined in the database that match the search 
			criteria and are available in the namespace.</para>
			
			<sect2 id="sec:wci.getplacepoint.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getplacepoint.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getplacepoint
(
	placename		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacepoint.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getPlacePoint parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placename</entry>
								<entry>The placename that you require information for.  
								NULL returns all place points in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getplacepoint.result">
				<title>Expected Result</title>
				
				<para>The list of place points.</para>

				<table frame="all">
					<title>wci.getPlacePoint return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeid</entry>
								<entry>The internal place ID used in WDB.</entry>
							</row>
							<row>
								<entry>placegeometrytype</entry>
								<entry>The place geometry of the place point. Currently points and grids
									are supported</entry>
							</row>
							<row>
								<entry>placegeometry</entry>
								<entry>The geometry of the place point.</entry>
							</row>
							<row>
								<entry>placeindeterminatecode</entry>
								<entry>The indeterminate code for the place point.</entry>
							</row>
							<row>
								<entry>placenamespaceid</entry>
								<entry>The name space of the query.</entry>
							</row>
							<row>
								<entry>placename</entry>
								<entry>The place name of the place point.</entry>
							</row>
							<row>
								<entry>originalsrid</entry>
								<entry>The original SRID of the place point.</entry>
							</row>
							<row>
								<entry>placestoretime</entry>
								<entry>The storetime of the place point.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getplacepoint.example">
				<title>Example</title>
				
				<para>An example to list the place points matching the name "oslo":</para>
				
				<programlisting>
SELECT wci.getplacepoint ( 'oslo' );
</programlisting>

				<para>List all place points starting on "os" in the name space:</para>

				<programlisting>
SELECT wci.getplacepoint ( 'os%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getplacepoint.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.getplaceregulargrid">
			<title>wci.getPlaceRegularGrid</title>
			
			<para>The function wci.getPlaceRegularGrid lists the place 
			grids defined in the database that match the search 
			criteria and are available in the namespace.</para>
			
			<sect2 id="sec:wci.getplaceregulargrid.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getplaceregulargrid.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getplaceregulargrid
(
	placename		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getplaceregulargrid.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getPlaceRegularGrid parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placename</entry>
								<entry>The placename that you require information for.  
								NULL returns all place grids in the namespace. PostgreSQL
								wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getplaceregulargrid.result">
				<title>Expected Result</title>
				
				<para>The list of place grids.</para>

				<table frame="all">
					<title>wci.getPlaceDefinition return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>placeid</entry>
								<entry>The internal place ID used in WDB.</entry>
							</row>
							<row>
								<entry>placegeometrytype</entry>
								<entry>The place geometry of the place definition. Currently points and grids
									are supported</entry>
							</row>
							<row>
								<entry>placegeometry</entry>
								<entry>The geometry of the place definition.</entry>
							</row>
							<row>
								<entry>placeindeterminatecode</entry>
								<entry>The indeterminate code for the place definition.</entry>
							</row>
							<row>
								<entry>placenamespaceid</entry>
								<entry>The name space of the query.</entry>
							</row>
							<row>
								<entry>placename</entry>
								<entry>The place name of the place definition.</entry>
							</row>
							<row>
								<entry>numberx</entry>
								<entry>The number of points along the x axis in the regular
									grid.</entry>
							</row>
							<row>
								<entry>numbery</entry>
								<entry>The number of points along the y axis in the regular
									grid.</entry>
							</row>
							<row>
								<entry>incrementx</entry>
								<entry>The increment distance on the x axis; i.e., the distance
									between two adjacent points on the x axis. The unit of the
									attribute is given by the Proj.4, which means that it is
									usually either degrees (the default) or meters.</entry>
							</row>
							<row>
								<entry>incrementy</entry>
								<entry>The increment distance on the y axis.</entry>
							</row>
							<row>
								<entry>startx</entry>
								<entry>The starting point of the grid on the x axis of the 
								original Proj.4 projection.</entry>
							</row>
							<row>
								<entry>starty</entry>
								<entry>The starting point of the grid on the y axis of the
								original Proj.4 projection.</entry>
							</row>
							<row>
								<entry>originalsrid</entry>
								<entry>The original SRID of the place definition. This is particularly
									important to keep track of for grids.</entry>
							</row>
							<row>
								<entry>projdefinition</entry>
								<entry>The original PROJ.4 projection of the place definition.</entry>
							</row>
							<row>
								<entry>placestoretime</entry>
								<entry>The storage time of the place definition.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getplaceregulargrid.example">
				<title>Example</title>
				
				<para>An example to list the place grid matching the name "hirlam 10 grid":</para>
				
				<programlisting>
SELECT wci.getplaceregulargrid ( 'hirlam 10 grid' );
</programlisting>

				<para>List all place grid starting on "hirlam" in the name space:</para>

				<programlisting>
SELECT wci.getplaceregulargrid ( 'hirlam%' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.getplaceregulargrid.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		<sect1 id="sec:wci.getsrid">
			<title>wci.getSrid</title>
			
			<para>The function wci.getSrid lists all the spatial
			reference ID's defined in the database that match the search 
			criteria and are available in the namespace.</para>
			
			<sect2 id="sec:wci.getsrid.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getsrid.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getsrid
(
	projstr			text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getsrid.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getSrid parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>projstr</entry>
								<entry>The Proj.4 string that matches the SRID you want to retrieve.
								NULL returns all SRIDs in the spatial reference system table.
								PostgreSQL wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getsrid.result">
				<title>Expected Result</title>
				
				<para>The list of SRIDs.</para>

				<table frame="all">
					<title>wci.getSrid return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>srid</entry>
								<entry>The spatial reference ID. An integer value that 
									uniquely identifies the Spatial Referencing System 
									(SRS) within the database.</entry>
							</row>
							<row>
								<entry>auth_name</entry>
								<entry>The name of the standard or standards body that 
								is being cited for this reference system. For example, 
								"EPSG" would be a valid auth_name.</entry>
							</row>
							<row>
								<entry>auth_srid</entry>
								<entry>he ID of the Spatial Reference System as defined 
									by the Authority cited in the auth_name. For EPSG data, 
									for example, this is the EPSD id number.</entry>
							</row>
							<row>
								<entry>srtext</entry>
								<entry>The Well-Known Text representation of the Spatial 
									Reference System. WDB ignores this column and always
									inserts NULL.</entry>
							</row>
							<row>
								<entry>proj4text</entry>
								<entry>This is the Proj.4 coordinate definition string
									for a particular SRID.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getsrid.example">
				<title>Example</title>
				
				<para>An example to list the SRID's with longitude/latitude projections:</para>
				
				<programlisting>
SELECT wci.getsrid ( '%+proj=longlat%' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.getsrid.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.setplacename</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getunit">
			<title>wci.getunit</title>
			
			<para>The function wci.getunit lists all the units defined in 
			the database that match the search criteria.</para>
			
			<sect2 id="sec:wci.getunit.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getunit.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getunit
(
	unit		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getunit.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getunit parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>unit</entry>
								<entry>The UCUM designation of the unit.
								NULL returns all units in the database.
								PostgreSQL wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getunit.result">
				<title>Expected Result</title>
				
				<para>The list of units.</para>

				<table frame="all">
					<title>wci.getunit return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>unitname</entry>
								<entry>The name (context-sensitive UCUM designation) of the unit.</entry>
							</row>
							<row>
								<entry>unittype</entry>
								<entry>The type of the unit.</entry>
							</row>
							<row>
								<entry>measure</entry>
								<entry>The measure of the unit, if any.</entry>
							</row>
							<row>
								<entry>description</entry>
								<entry>A description of the unit.</entry>
							</row>
							<row>
								<entry>siunitconversioncoefficient</entry>
								<entry>The coefficient to multiply the value with to get the SI unit (if any).
								The formula is (value * coefficient) + term</entry>
							</row>
							<row>
								<entry>siunitconversionterm</entry>
								<entry>The term to add to the value to get the SI unit (if any).
								The formula is (value * coefficient) + term</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getunit.example">
				<title>Example</title>
				
				<para>An example to list all units with pressure (Pascal):</para>
				
				<programlisting>
SELECT wci.getunit ( '%Pa%' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.getunit.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addunit</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.getvalueparameter">
			<title>wci.getValueParameter</title>
			
			<para>The function wci.getValueParameter lists all the value parameters defined in 
			the database that match the search criteria.</para>
			
			<sect2 id="sec:wci.getvalueparameter.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have read access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.getvalueparameter.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.getvalueparameter
(
	parameter		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.getvalueparameter.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.getvalueparameter parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>parameter</entry>
								<entry>The name of the value parameter in the name space.
								NULL returns all value parameters in the name space.
								PostgreSQL wild cards (used in LIKE statements) may be used.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.getvalueparameter.result">
				<title>Expected Result</title>
				
				<para>The list of valueparameters.</para>

				<table frame="all">
					<title>wci.getvalueparameter return row</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Attribute</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>valueparameterid</entry>
								<entry>The internal parameter ID of the value parameter.</entry>
							</row>
							<row>
								<entry>parameternamespaceid</entry>
								<entry>The currently selected parameter name space.</entry>
							</row>
							<row>
								<entry>valueparametername</entry>
								<entry>The name of the valueparameter in the name space.</entry>
							</row>
							<row>
								<entry>valueparameterunit</entry>
								<entry>The unit of measure of the value parameter.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</sect2>
			
			<sect2 id="sec:wci.getvalueparameter.example">
				<title>Example</title>
				
				<para>An example to list all value parameters based on temperature:</para>
				
				<programlisting>
SELECT wci.getvalueparameter ( '%temperature%' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.getvalueparameter.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.read">
			<title>wci.read</title>
			
			<para>wci.read is the function that fetches MHO data from the database, and as
				such is the core of the WDB Call Interface. The function takes the user's
				search parameters as input and returns data as either individual point, or
				as a reference to a complete data grid (a Grid ID - shortened as GId).</para>
			
			<para>The function is overloaded, and exists in two almost identical versions,
				depending on the return type required.</para>
			
			<sect2 id="sec:wci.read:prerequisites">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have access to group role wdb_read</para>
					</listitem>
					<listitem>
						<para>The user must have called wci.begin</para>
					</listitem>
				</itemizedlist>
				
			</sect2>
			
			<sect2 id="sec:wci.read:syntax">
				<title>Syntax</title>
				
				<programlisting>
wci.read
(
          dataProviders  ARRAY[text],
          place          text,
          referenceTime  text,
          validtime      text,
          parameters     ARRAY[text],
          level          text,
          dataVersions   ARRAY[integer],
          returnType     wci.returnfloat
)
			</programlisting>
				
				<programlisting>
wci.read 
(
          dataProviders  ARRAY[text],
          place          text,
          referenceTime  text,
          validtime      text,
          parameters     ARRAY[text],
          level          text,
          dataVersions   ARRAY[integer],
          returnType     wci.returngid
)
			</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.read:parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.read parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>dataProviders</entry>
								<entry>List of data providers for the MHO data to be
									retrieved</entry>
							</row>
							<row>
								<entry>place</entry>
								<entry>A text string containing either a geometry
									describing the geographic locations that the user
									is interested in retrieving data for (formatted
									using well-known-text) or a placename. The string
									may optionally be prefixed with a place
									interpolation description.</entry>
							</row>
							<row>
								<entry>referenceTime</entry>
								<entry>When the MHO data was created</entry>
							</row>
							<row>
								<entry>validtime</entry>
								<entry>What time is the MHO data valid for</entry>
							</row>
							<row>
								<entry>parameters</entry>
								<entry>What MHO-parameters the user is interested in
									retrieving</entry>
							</row>
							<row>
								<entry>level</entry>
								<entry>What level (altitude/depth) the data is located
									at</entry>
							</row>
							<row>
								<entry>dataVersion</entry>
								<entry>What version of the data should be
									returned</entry>
							</row>
							<row>
								<entry>returnType</entry>
								<entry>What type of data the user wants
									returned</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
				<para>>Geospatial definitions are defined using well-known-text. Only
					POINTs and POLYGONs are currently supported.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.read:expected_result">
				<title>Expected Result</title>
				
				<para>Depending on the returnType specified:</para>
				
				<itemizedlist>
					<listitem>
						<para>wci.returnfloat</para>
					</listitem>
					<listitem>
						<para>wci.returngid</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.read:examples">
				<title>Examples</title>
				
				<para>The following query returns Hirlam 8 data from the database using a
					wci.read:</para>
				
			<programlisting>
SELECT * 
FROM wci.READ ( ARRAY['Hirlam norway'], -- Data provider name
               'POINT(10 60)', -- Geometry
               '1980-04-05 12:00:00',  -- Reference time
               'inside 1980-04-06 00:00:00 TO 1980-04-07 00:00:00', --Valid time
               ARRAY['air pressure', 'air temperature'], -- Parameter
               NULL, -- Level
               ARRAY[-1],  -- Data version
               NULL::wci.returnFloat -- Return type
             )
		</programlisting>
			
			<para>The above query returns Hirlam 8 data pressure and temperature data for 
				the point closest to 10 degrees East, 60 degrees North that is valid for
				the twenty four hour time period of the 6th of April, 1980 and which was
				created (has the reference time) for the 5th of April, 12:00. The query returns
				all data that fulfills the above qualifications regardless of level, but only 
				the latest version (dataversion) of the data available.	Values will be returned 
				as point data.</para>
			
			</sect2>

			<sect2 id="sec:wci.read:see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.begin</para>
					</listitem>
					<listitem>
						<para>wci.end</para>
					</listitem>
					<listitem>
						<para>wci.fetch</para>
					</listitem>
					<listitem>
						<para>wci.write</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>		

		<sect1 id="sec:wci.setdataprovidername">
			<title>wci.setDataProviderName</title>
			
			<para>The function wci.setDataProviderName allows an administrator to set
			the data provider name of a data provider in the currently selected
			namespace of WDB. If another data provider name has already been set
			for the data provider in the namespace, this function will overwrite
			the old name.</para>
			
			<sect2 id="sec:wci.setdataprovidername.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.setdataprovidername.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.setdataprovidername
(
	fromNameSpaceId			int,
	fromName				text,
	dataProviderName		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.setdataprovidername.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.setDataProviderName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>fromNameSpaceId</entry>
								<entry>The nameSpace Id of the fromName.</entry>
							</row>
							<row>
								<entry>fromName</entry>
								<entry>The name of the data provider to insert a name for. The name
									is taken from the fromNameSpaceId.</entry>
							</row>
							<row>
								<entry>dataProviderName</entry>
								<entry>The data provider name to be set.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.setdataprovidername.result">
				<title>Expected Result</title>
				
				<para>No return.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.setdataprovidername.example">
				<title>Example</title>
				
				<para>To rename the data provider with the canonical name "michael" to "michel", 
				we would use:</para>
				
				<programlisting>
SELECT wci.setdataprovidername( 'michael', 'michel' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.setdataprovidername.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.adddataprovider</para></listitem>
					<listitem><para>wci.adddataprovidertogroup</para></listitem>
					<listitem><para>wci.addwciuser</para></listitem>
					<listitem><para>wci.getdataprovider</para></listitem>
					<listitem><para>wci.getdataprovidername</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.setlevelparametername">
			<title>wci.setLevelParameterName</title>
			
			<para>The function wci.setLevelParameterName allows an administrator to set
			the name of a level parameter in the currently selected
			namespace of WDB. If another level parameter name has already been set
			in the namespace, this function will overwrite
			the old name.</para>
			
			<sect2 id="sec:wci.setlevelparametername.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.setlevelparametername.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.setlevelparametername
(
	canonicalName			text,
	levelParameterName		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.setlevelparametername.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.setLevelParameterName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>canonicalName</entry>
								<entry>The name of the level parameter in the canonical (0) namespace.
									Note that it is not possible to change the canonical name of a 
									parameter using this function.</entry>
							</row>
							<row>
								<entry>levelParameterName</entry>
								<entry>The level parameter name to be set.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.setlevelparametername.result">
				<title>Expected Result</title>
				
				<para>No return.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.setlevelparametername.example">
				<title>Example</title>
				
				<para>To rename the parameter with the canonical name "hybrid level" to "HL", 
				we would use:</para>
				
				<programlisting>
SELECT wci.setlevelparametername( 'hybrid level', 'HL' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.setlevelparametername.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addcodelevelparameter</para></listitem>
					<listitem><para>wci.addmeasurelevelparameter</para></listitem>
					<listitem><para>wci.getlevelparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>


		<sect1 id="sec:wci.setplacename">
			<title>wci.setPlaceName</title>
			
			<para>The function wci.setPlaceName allows an administrator to set
			the place name of a place definition in the currently selected
			namespace of WDB. If another place name has already been set
			for the place definition in the namespace, this function will overwrite
			the old name.</para>
			
			<sect2 id="sec:wci.setplacename.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative access to the database.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.setplacename.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.setPlaceName
(
	canonicalName		text,
	placeName			text	
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.setplacename.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.setPlaceName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>canonicalName</entry>
								<entry>The canonical name of the place definition that
									you wish to change the place name for.</entry>
							</row>
							<row>
								<entry>placeName</entry>
								<entry>The new place name of the place definition.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.setplacename.result">
				<title>Expected Result</title>
				
				<para>None.</para>

			</sect2>
			
			<sect2 id="sec:wci.setplacename.example">
				<title>Example</title>
				
				<para>An example to set the name of the Hirlam 10 grid in the database:</para>
				
				<programlisting>
SELECT wci.setplacename ( 'grid(5.75 -13.25, 0.1 0.1, 248 400, 50001)', 'hirlam 10km grid' );
</programlisting>

			</sect2>
			
			<sect2 id="sec:wci.setplacename.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addplacepoint</para></listitem>
					<listitem><para>wci.addplaceregulargrid</para></listitem>
					<listitem><para>wci.addsrid</para></listitem>
					<listitem><para>wci.getplacedefinition</para></listitem>
					<listitem><para>wci.getplacename</para></listitem>
					<listitem><para>wci.getplacepoint</para></listitem>
					<listitem><para>wci.getplaceregulargrid</para></listitem>
				</itemizedlist>
			</sect2>
		</sect1>


		<sect1 id="sec:wci.setvalueparametername">
			<title>wci.setValueParameterName</title>
			
			<para>The function wci.setValueParameterName allows an administrator to set
			the name of a value parameter in the currently selected
			namespace of WDB. If another value parameter name has already been set
			in the namespace, this function will overwrite
			the old name.</para>
			
			<sect2 id="sec:wci.setvalueparametername.prereq">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have administrative rights to the database; i.e., 
						either be the system administrator or a member of the WDB_ADMIN user
						group.</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
			<sect2 id="sec:wci.setvalueparametername.syntax">
				<title>Syntax</title>
								
				<programlisting>
wci.setvalueparametername
(
	canonicalName			text,
	valueParameterName		text
)
</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.setvalueparametername.parameters">
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.setValueParameterName parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry>Parameter</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>canonicalName</entry>
								<entry>The name of the value parameter in the canonical (0) namespace.
									Note that it is not possible to change the canonical name of a 
									parameter using this function.</entry>
							</row>
							<row>
								<entry>valueParameterName</entry>
								<entry>The value parameter name to be set.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2 id="sec:wci.setvalueparametername.result">
				<title>Expected Result</title>
				
				<para>No return.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.setvalueparametername.example">
				<title>Example</title>
				
				<para>To rename the parameter with the canonical name "air temperature"
				to "2TM", we would use:</para>
				
				<programlisting>
SELECT wci.setvalueparametername( 'air temperature', '2TM' );
</programlisting>
								
			</sect2>
			
			<sect2 id="sec:wci.setvalueparametername.see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem><para>wci.addcodevalueparameter</para></listitem>
					<listitem><para>wci.adddimensionlessvalueparameter</para></listitem>
					<listitem><para>wci.addfunctionvalueparameter</para></listitem>
					<listitem><para>wci.addmeasurevalueparameter</para></listitem>
					<listitem><para>wci.getvalueparameter</para></listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>

		
		<sect1 id="sec:wci.version">
			<title>wci.version</title>
			
			<para>wci.version is a simple function that permits the user to retrieve version
			information about the WDB system.</para>
					
			<sect2 id="sec:wci.version:prerequisites">
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must have access to group role wdb_read</para>
					</listitem>
				</itemizedlist>
				
			</sect2>
			
			<sect2 id="sec:wci.version:syntax">
				<title>Syntax</title>
				
				<programlisting>
wci.version ( )
			</programlisting>
				
			</sect2>
			
			<sect2 id="sec:wci.version:parameters">
				<title>Parameters</title>
				
				<para>None.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.version:expected_result">
				<title>Expected Result</title>
				
				<para>The function returns a text with a string that describes the version of the 
				WDB system in the PostgreSQL database.</para>
				
			</sect2>
			
			<sect2 id="sec:wci.version:examples">
				<title>Examples</title>
				
				<para>The following query returns the WDB version:</para>
				
			<programlisting>
SELECT wci.version ( )
		</programlisting>
			
			<para>The result is a single row of the text type containing the WDB version string.</para>
			
			</sect2>

			<sect2 id="sec:wci.version:see">
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.begin</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>		

		<sect1>
			<title>wci.write</title>
			
			<para>wci.write is function that can be utilized to write MHO data into the
				database.</para>
			
			<para>The function is overloaded, and exists in several different versions
				depending on the input utilized.</para>
			
			<sect2>
				<title>Prerequisites</title>
				
				<itemizedlist>
					<listitem>
						<para>The user must be connected to the database</para>
					</listitem>
					<listitem>
						<para>The user must have access to group role wdb_write</para>
					</listitem>
					<listitem>
						<para>The user must have called wci.begin</para>
					</listitem>
				</itemizedlist>
				
			</sect2>
			
			<sect2>
				<title>Syntax</title>				
				
				<programlisting>
wci.write
(
	value          gid,
	placename      text,
	referencetime  timestamp without time zone,
	validtimerom   timestamp without time zone,
	validtimeto    timestamp without time zone
	valueparameter text,
	levelparameter text,
	levelFrom      float,
	levelTo        float 
)
</programlisting>

				<programlisting>
wci.write
(
	value          gid,
	placename      text,
	referencetime  timestamp without time zone,
	validtimerom   timestamp without time zone,
	validtimeto    timestamp without time zone
	valueparameter text,
	levelparameter text,
	levelFrom      float,
	levelTo        float 
)
</programlisting>
				
				
				<programlisting>	
wci.write
(
          row           wci.returnGid
)
</programlisting>
				
			</sect2>
			
			<sect2>
				<title>Parameters</title>
				
				<table frame="all">
					<title>wci.write parameters</title>
					<tgroup cols="2">
						<colspec align="left"/>
						<colspec align="left"/>
						<thead>
							<row>
								<entry> Parameter </entry>
								<entry> Description </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>value</entry>
								<entry>The OID value to be retrieved</entry>
							</row>
							<row>
								<entry>placename</entry>
								<entry>A text string identifying the geographical
									location that the data is being inserted
									for</entry>
							</row>
							<row>
								<entry>referenceTime</entry>
								<entry>When the MHO data was created</entry>
							</row>
							<row>
								<entry>validtimefrom</entry>
								<entry>What time is the MHO data valid for; starting
									time</entry>
							</row>
							<row>
								<entry>validtimefrom</entry>
								<entry>What time is the MHO data valid for; ending
									time</entry>
							</row>
							<row>
								<entry>valueparameter</entry>
								<entry>What MHO-parameters the user is interested in
									retrieving</entry>
							</row>
							<row>
								<entry>levelparameter</entry>
								<entry>The parameter that describes the level
									designation</entry>
							</row>
							<row>
								<entry>levelFrom</entry>
								<entry>What level (altitude/depth) the data is located
									at; starting point</entry>
							</row>
							<row>
								<entry>levelTo</entry>
								<entry>What level (altitude/depth) the data is located
									at; ending point</entry>
							</row>
							<row>
								<entry>row</entry>
								<entry>A wci.returnOid row. This function allows the
									user to take the result a query and write the same (or a
									slightly modified row) easily into the
									database.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
			</sect2>
			
			<sect2>
				<title>Expected Result</title>
				
				<para>The valueid of the inserted row.</para>
				
			</sect2>
			
			<sect2>
				<title>See Also</title>
				
				<itemizedlist>
					<listitem>
						<para>wci.read</para>
					</listitem>
					<listitem>
						<para>wci.begin</para>
					</listitem>
					<listitem>
						<para>wci.end</para>
					</listitem>
				</itemizedlist>
			</sect2>
			
		</sect1>
		
		
	</chapter>
	
	<chapter>
		<title>Data Type Reference</title>
		
		<para>This section provides an overview of the data types that are returned from the
			database through WCI; in particular the return rows used by the wci.read and
			wci.write calls.</para>
		
	<sect1>
			<title>wci.browsedataprovider</title>
			
			<para>The wci.browsedataprovider data type is a simple row type used to
				return summarized information about the data providers of the rows
				currently stored in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.browsedataprovider</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>dataprovidername</entry>
							<entry>The name of the data provider that the summary information is about.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>referencetimefrom</entry>
							<entry>The earliest referencetime in the database for the dataprovider for which there exists data.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>referencetimeto</entry>
							<entry>The latest referencetime in the database for the dataprovider for which there exists data.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database for the given dataprovider.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

	<sect1>
			
				<title>wci.browseplace</title>
			
			<para>The wci.browseplace data type is a simple row type used to
				return summarized information about the placenames of the rows
				currently stored in the database. The following table
				describes the attributes.</para>
			<table frame="all">
				<title>wci.browseplace</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>placename</entry>
							<entry>The name of the placedefinition that the summary information is about.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>referencetimefrom</entry>
							<entry>The earliest referencetime in the database for the placename for which there exists data.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>referencetimeto</entry>
							<entry>The latest referencetime in the database for the placename for which there exists data.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database for the given placename.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.browsereferencetime</title>
			
			<para>The wci.browsereferencetime data type is a simple row type used to
				return summarized information about the referencetime of the rows
				currently stored in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.browsereferencetime</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>referencetime</entry>
							<entry>The reference time that the summary information is about.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database for the given referencetime.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

			<sect1>
			<title>wci.browsevalidtime</title>
			
			<para>The wci.browsevalidtime data type is a simple row type used to
				return summarized information about the validtime of the rows
				currently stored in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.browsevalidtime</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>validtimefrom</entry>
							<entry>The start time of the validtime period that is being summarized.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>validtimeto</entry>
							<entry>The end time of the validtime period being summarized.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database for the given validtime period or time point .</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.browsevalueparameter</title>
			
			<para>The wci.browsevalueparameter data type is a simple row type used to
				return summarized information about the valueparameters currently used
				by the rows in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.browsevalueparameter</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>valueparametername</entry>
							<entry>The name of the valueparameter that the summary information is about.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>valueunitname</entry>
							<entry>The unit of the parameter in the database.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database of the given valueparameter.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.browselevelparameter</title>
			
			<para>The wci.browselevelparameter data type is a simple row type used to
				return summarized information about the levelparameters and level values
				currently stored by the rows in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.browselevelparameter</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>levelparametername</entry>
							<entry>The name of the levelparameter that the summary information is about.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>levelunitname</entry>
							<entry>The unit of the parameter in the database.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>levelfrom</entry>
							<entry>The level from value of the rows in the database.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>levelto</entry>
							<entry>The level to value of the rows in the database.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>numberoftuples</entry>
							<entry>The number of data rows that exist in the database of the given level parameter and level value combination.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.infodataprovider</title>
			
			<para>The wci.infodataprovider data type is a simple row type used to
				return metadata information about the dataproviders that can be stored
				in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.infodataprovider</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>dataprovidername</entry>
							<entry>The name of the dataprovider.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>dataprovidertype</entry>
							<entry>The type of the dataprovider. This specifies whether the dataprovider is a 
							person, computer system, meteorological station, or something else. It can also
							specify that the dataprovidername represents a group of other dataproviders.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>spatialdomaindelivery</entry>
							<entry>The spatialdomaindelivery describes the spatial domain in which the
							dataprovider returns data. Examples are points and grids. The spatialdomaindelivery
							<emphasis>any</emphasis> is used to indicate that the dataprovider can store and
							return data in several formats on the database.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>dataprovidercomment</entry>
							<entry>A text field that provides additional descriptive information about the dataprovider.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>dataproviderstoretime</entry>
							<entry>Describes the time at which the dataprovider information was created.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.infoplace</title>
			
			<para>The wci.infoplace data type is a simple row type used to
				return metadata information about the place definitions that can be stored
				in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.infoplace</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>placename</entry>
							<entry>The name of the place definition.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>placegeometry</entry>
							<entry>The geometry (in WKT) that describes the place definition. For regular grids, this 
							is a polygon of the four corners of the grid transformed into the default projection
							of the database.</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>placeindeterminatetype</entry>
							<entry>The place indeterminate type is used to describe imprecision or missing data in
							the place definition information.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>placegeometrytype</entry>
							<entry>The placegeometrytype describes what type of geometry the row describes.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>placestoretime</entry>
							<entry>Describes the time at which the place definition was created.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.inforegulargrid</title>
			
			<para>The wci.inforegulargrid data type is a simple row type used to
				return detailed metadata information about the place definitions 
				of the grid type that can be stored in the database. The following table
				describes the attributes.</para>
			
			<table frame="all">
				<title>wci.infoplace</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>placename</entry>
							<entry>The name of the place definition.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>numberX</entry>
							<entry>The number of points along the X axis of the grid (i.e., the width).</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>numberY</entry>
							<entry>The number of points along the Y axis of the grid (i.e., the height).</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>incrementX</entry>
							<entry>The distance between two points on the X axis of the grid in the original
							projection of the grid.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>incrementY</entry>
							<entry>The distance between two points on the Y axis of the grid in the original
							projection of the grid.</entry>
						</row>
						<row>
							<entry>5</entry>
							<entry>startX</entry>
							<entry>The starting point (lower left corner) of the grid on the X axis in the original
							projection of the grid.</entry>
						</row>
						<row>
							<entry>6</entry>
							<entry>startY</entry>
							<entry>The starting point (lower left corner) of the grid on the Y axis in the original
							projection of the grid.</entry>
						</row>
						<row>
							<entry>7</entry>
							<entry>projDefinition</entry>
							<entry>The proj.4 string that defines the original projection of the grid. Since the
							structure of a grid is not reprojected, this information maya be useful if you need
							to deal with the grid information directly.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.infovalueparameter</title>
			
			<para>The wci.infovalueparameter data type is a simple row type used to
				return metadata information about the value parameters that can be stored
				in the database. The following table describes the attributes.</para>
			
			<table frame="all">
				<title>wci.infovalueparameter</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>valueparametername</entry>
							<entry>The name of the value parameter.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>valueunitname</entry>
							<entry>The name of the unit that the parameter data is stored in. By default, this will 
							always be the SI unit, where possible.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.infolevelparameter</title>
			
			<para>The wci.infolevelparameter data type is a simple row type used to
				return metadata information about the level parameters that can be stored
				in the database. The following table describes the attributes.</para>
			
			<table frame="all">
				<title>wci.infolevelparameter</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>levelparametername</entry>
							<entry>The name of the level parameter.</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>levelunitname</entry>
							<entry>The name of the unit that the parameter data is stored in. By default, this will 
							always be the SI unit, where possible.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect1>

		<sect1>
			<title>wci.returnFloat</title>
			
			<para>The wci.returnFloat data type is a simple row type used for returning
				floating-point data to the user from the wci.read call. The following table
				describes the attributes that are returned from wci.returnFloat;
				including the ordering of the attributes in the type.</para>
			
			<table frame="all">
				<title>wci.returnFloat</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>value</entry>
							<entry>The floating point value returned by the
								query</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>data provider name</entry>
							<entry>The name of the data provider of the value (as defined
								within the dataprovidernamespace selected)</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>place name</entry>
							<entry>The name of the grid definition selected (as defined
								within the placenamespace selected). The place name can
								be then be used to retrieve the original grid definition
								of the grid, if needed.</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>place geometry</entry>
							<entry>The geometry definition of the value returned. This
								is less useful for rotated grids, as the coordinates will
								be in regular WGS84.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>referencetime</entry>
							<entry>The time of reference for the value returned</entry>
						</row>
						<row>
							<entry>5</entry>
							<entry>validtime from</entry>
							<entry>The first point in time for which the value is
								valid</entry>
						</row>
						<row>
							<entry>6</entry>
							<entry>validtime to</entry>
							<entry>The last point in time for which the value is
								valid</entry>
						</row>
						<row>
							<entry>7</entry>
							<entry>validtime indeterminate code</entry>
							<entry>The validtime indeterminate code is used to describe imprecision or 
								missing data in the level information. The code 0 is used to
								describe <emphasis>exact</emphasis>, which implies that the
								validtime interval given is precise.</entry>
						</row>
						<row>
							<entry>8</entry>
							<entry>value parameter name</entry>
							<entry>The parameter name for the value returned (as defined
								within the parameter name space selected)</entry>
						</row>
						<row>
							<entry>9</entry>
							<entry>value parameter unit</entry>
							<entry>The measurement unit for the value returned</entry>
						</row>
						<row>
							<entry>10</entry>
							<entry>level parameter name</entry>
							<entry>The parameter name for the level of the value returned
								(as defined within the parameter name space
								selected)</entry>
						</row>
						<row>
							<entry>11</entry>
							<entry>level unit name</entry>
							<entry>The measurement unit for the level of the value
								returned</entry>
						</row>
						<row>
							<entry>12</entry>
							<entry>level from</entry>
							<entry>The lower value of the level</entry>
						</row>
						<row>
							<entry>13</entry>
							<entry>level to</entry>
							<entry>The upper value of the level</entry>
						</row>
						<row>
							<entry>14</entry>
							<entry>level indeterminate code</entry>
							<entry>The level indeterminate code is used to describe imprecision or 
								missing data in the level information. The code 0 is used to
								describe <emphasis>exact</emphasis>.</entry>
						</row>
						<row>
							<entry>15</entry>
							<entry>data version</entry>
							<entry>The data version of the value. Data version is
								utilized for two separate purposes; to indicate
								different version of the same data (i.e., to allow
								corrections and edits to co-exist in the database) and
								for perturbed versions of the same data (e.g., ensemble
								members).</entry>
						</row>
						<row>
							<entry>16</entry>
							<entry>confidence code</entry>
							<entry>Quality marker (not currently used)</entry>
						</row>
						<row>
							<entry>17</entry>
							<entry>value store time</entry>
							<entry>The time when the data was inserted into the
								database</entry>
						</row>
						<row>
							<entry>18</entry>
							<entry>value id</entry>
							<entry>The ID of the value within its value type. Together
								with valuetype, this costitutes a key of the WDB
								value</entry>
						</row>
						<row>
							<entry>19</entry>
							<entry>value type</entry>
							<entry>The type of the value returned. Together with the
								valueid, this constitutes a key of the WDB value</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			
		</sect1>
		
		<sect1>
			<title>wci.returnGid</title>
			
			<para>The wci.returnGid data type is a simple row type used for returning data to
				the user from the wci.read call. The following table describes the
				attributes that are returned from wci.returnGid; including the ordering
				of the attributes in the type.</para>
			
			<table frame="all">
				<title>wci.returnGid</title>
				<tgroup cols="3">
					<colspec align="center"/>
					<colspec align="left"/>
					<colspec align="left"/>
					<thead>
						<row>
							<entry> Order </entry>
							<entry> Attribute </entry>
							<entry> Description </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>0</entry>
							<entry>value</entry>
							<entry>The grid ID (GID) of the value being
								returned</entry>
						</row>
						<row>
							<entry>1</entry>
							<entry>data provider name</entry>
							<entry>The name of the data provider of the value (as defined
								within the dataprovidernamespace selected)</entry>
						</row>
						<row>
							<entry>2</entry>
							<entry>place name</entry>
							<entry>The name of the grid definition selected (as defined
								within the placenamespace selected). The place name can
								be then be used to retrieve the original grid definition
								of the grid, if needed</entry>
						</row>
						<row>
							<entry>3</entry>
							<entry>place geometry</entry>
							<entry>The geometry definition of the value returned. This
								is less useful for rotated grids, as the coordinates will
								be in regular WGS84.</entry>
						</row>
						<row>
							<entry>4</entry>
							<entry>referencetime</entry>
							<entry>The time of reference for the value returned</entry>
						</row>
						<row>
							<entry>5</entry>
							<entry>validtime from</entry>
							<entry>The first point in time for which the value is
								valid</entry>
						</row>
						<row>
							<entry>6</entry>
							<entry>validtime to</entry>
							<entry>The last point in time for which the value is
								valid</entry>
						</row>
						<row>
							<entry>7</entry>
							<entry>validtime indeterminate code</entry>
							<entry>The validtime indeterminate code is used to describe imprecision or 
								missing data in the level information. The code 0 is used to
								describe <emphasis>exact</emphasis>, which implies that the
								validtime interval given is precise.</entry>
						</row>
						<row>
							<entry>8</entry>
							<entry>value parameter name</entry>
							<entry>The parameter name for the value returned (as defined
								within the parameter name space selected)</entry>
						</row>
						<row>
							<entry>9</entry>
							<entry>value parameter unit</entry>
							<entry>The measurement unit for the value returned</entry>
						</row>
						<row>
							<entry>10</entry>
							<entry>level parameter name</entry>
							<entry>The parameter name for the level of the value returned
								(as defined within the parameter name space
								selected)</entry>
						</row>
						<row>
							<entry>11</entry>
							<entry>level unit name</entry>
							<entry>The measurement unit for the level of the value
								returned</entry>
						</row>
						<row>
							<entry>12</entry>
							<entry>level from</entry>
							<entry>The lower value of the level</entry>
						</row>
						<row>
							<entry>13</entry>
							<entry>level to</entry>
							<entry>The upper value of the level</entry>
						</row>
						<row>
							<entry>14</entry>
							<entry>level indeterminate code</entry>
							<entry>The level indeterminate code is used to describe imprecision or 
								missing data in the level information. The code 0 is used to
								describe <emphasis>exact</emphasis>.</entry>
						</row>
						<row>
							<entry>15</entry>
							<entry>data version</entry>
							<entry>The data version of the value. Data version is
								utilized for two separate purposes; to indicate
								different version of the same data (i.e., to allow
								corrections and edits to co-exist in the database) and
								for perturbed versions of the same data (e.g., ensemble
								members).</entry>
						</row>
						<row>
							<entry>16</entry>
							<entry>confidence code</entry>
							<entry>Quality marker (not currently used)</entry>
						</row>
						<row>
							<entry>17</entry>
							<entry>value store time</entry>
							<entry>The time when the data was inserted into the
								database</entry>
						</row>
						<row>
							<entry>18</entry>
							<entry>value id</entry>
							<entry>The ID of the value within its value type. Together
								with valuetype, this costitutes a key of the WDB
								value</entry>
						</row>
						<row>
							<entry>19</entry>
							<entry>value type</entry>
							<entry>The type of the value returned. Together with the
								valueid, this constitutes a key of the WDB value</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			
		</sect1>

	</chapter>
	
	<chapter id="cha:wci_examples">
		<title>Examples</title>
		
		<para>You can find a number of examples using SQL, perl, java, and C++ 
		in the source package of WDB, under the examples directory.</para>
						
	</chapter>
	
	<chapter id="cha:wci_faq">
		<title>Frequently Asked Questions</title>
		
		<para>This page is for a list of frequently asked questions about WCI.</para>
						
	</chapter>
	
	
	<chapter id="cha:wci_known-problems">
		<title>Known Problems, Bugs, and Limitations</title>
		
		<para>The following page describes some of the known problems and limitations of the
		WCI interface, and how to deal with them.</para>
		
		<sect1>
			<title>Limit of 100,000 rows returned by wci.read from a single grid</title>
			
			<para>The wci.read function is limited to returning no more than 100,000 rows
			from a single grid operation. If you need to retrieve a greater number of values
			from one grid in the database, you should use wci.fetch to retrieve the Grid object
			directly and perform the retrieval manually.</para>

		</sect1>		
						
	</chapter>
	
</book>
